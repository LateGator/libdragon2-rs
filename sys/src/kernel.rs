/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub const KMUTEX_STANDARD: u32 = 0;
pub const KMUTEX_RECURSIVE: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kthread_s {
    _unused: [u8; 0],
}
pub type kthread_t = kthread_s;
#[repr(C)]
pub struct kmutex_s {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmutex_s"][::core::mem::size_of::<kmutex_s>() - 8usize];
    ["Alignment of kmutex_s"][::core::mem::align_of::<kmutex_s>() - 4usize];
};
impl kmutex_s {
    #[inline]
    pub fn original_pri(&self) -> i8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_original_pri(&mut self, val: i8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn original_pri_raw(this: *const Self) -> i8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_original_pri_raw(this: *mut Self, val: i8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> u8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn owner(&self) -> crate::n64sys::phys_addr_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_owner(&mut self, val: crate::n64sys::phys_addr_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn owner_raw(this: *const Self) -> crate::n64sys::phys_addr_t {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                23u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_owner_raw(this: *mut Self, val: crate::n64sys::phys_addr_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                23u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn counter(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_counter(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn counter_raw(this: *const Self) -> u8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                8u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_counter_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn waiting(&self) -> crate::n64sys::phys_addr_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(40usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_waiting(&mut self, val: crate::n64sys::phys_addr_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(40usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn waiting_raw(this: *const Self) -> crate::n64sys::phys_addr_t {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                40usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_waiting_raw(this: *mut Self, val: crate::n64sys::phys_addr_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                40usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        original_pri: i8,
        flags: u8,
        owner: crate::n64sys::phys_addr_t,
        counter: u8,
        waiting: crate::n64sys::phys_addr_t,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let original_pri: u8 = unsafe { ::core::mem::transmute(original_pri) };
            original_pri as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let flags: u8 = unsafe { ::core::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let owner: u32 = unsafe { ::core::mem::transmute(owner) };
            owner as u64
        });
        __bindgen_bitfield_unit.set(32usize, 8u8, {
            let counter: u8 = unsafe { ::core::mem::transmute(counter) };
            counter as u64
        });
        __bindgen_bitfield_unit.set(40usize, 24u8, {
            let waiting: u32 = unsafe { ::core::mem::transmute(waiting) };
            waiting as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type kmutex_t = kmutex_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kcond_s {
    pub waiting: *mut kthread_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kcond_s"][::core::mem::size_of::<kcond_s>() - 4usize];
    ["Alignment of kcond_s"][::core::mem::align_of::<kcond_s>() - 4usize];
    ["Offset of field: kcond_s::waiting"][::core::mem::offset_of!(kcond_s, waiting) - 0usize];
};
pub type kcond_t = kcond_s;
unsafe extern "C" {
    pub fn kernel_init() -> *mut kthread_t;
    pub fn kernel_close();
    pub fn kthread_new(
        name: *const ::core::ffi::c_char,
        stack_size: ::core::ffi::c_int,
        pri: i8,
        user_entry: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
        >,
        user_data: *mut ::core::ffi::c_void,
    ) -> *mut kthread_t;
    pub fn kthread_current() -> *mut kthread_t;
    pub fn kthread_yield();
    pub fn kthread_suspend(th: *mut kthread_t);
    pub fn kthread_resume(th: *mut kthread_t);
    pub fn kthread_backtrace(
        th: *mut kthread_t,
        buffer: *mut ::core::ffi::c_void,
        size: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn kthread_sleep(ticks: u32);
    pub fn kthread_set_pri(th: *mut kthread_t, pri: i8);
    pub fn kthread_kill(th: *mut kthread_t, res: ::core::ffi::c_int);
    pub fn kthread_exit(res: ::core::ffi::c_int) -> !;
    pub fn kthread_detach(th: *mut kthread_t);
    pub fn kthread_join(th: *mut kthread_t) -> ::core::ffi::c_int;
    pub fn kthread_try_join(th: *mut kthread_t, res: *mut ::core::ffi::c_int) -> bool;
    pub fn kthread_name(th: *mut kthread_t) -> *const ::core::ffi::c_char;
    pub fn kmutex_init(mutex: *mut kmutex_t, flags: u8);
    pub fn kmutex_destroy(mtx: *mut kmutex_t);
    pub fn kmutex_lock(mtx: *mut kmutex_t);
    pub fn kmutex_unlock(mtx: *mut kmutex_t);
    pub fn kmutex_try_lock(mtx: *mut kmutex_t, ticks: u32) -> bool;
    pub fn kcond_init(cond: *mut kcond_t);
    pub fn kcond_destroy(cond: *mut kcond_t);
    pub fn kcond_wait(cond: *mut kcond_t, mtx: *mut kmutex_t);
    pub fn kcond_wait_timeout(cond: *mut kcond_t, mtx: *mut kmutex_t, ticks: u32) -> bool;
    pub fn kcond_signal(cond: *mut kcond_t);
    pub fn kcond_broadcast(cond: *mut kcond_t);
}
