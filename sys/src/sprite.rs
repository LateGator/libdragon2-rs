/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        unsafe { ::core::slice::from_raw_parts(self.as_ptr(), len) }
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        unsafe { ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len) }
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const SPRITE_FLAGS_TEXFORMAT: u32 = 31;
pub const SPRITE_FLAGS_OWNEDBUFFER: u32 = 32;
pub const SPRITE_FLAGS_EXT: u32 = 128;
#[repr(C)]
pub struct sprite_s {
    pub width: u16,
    pub height: u16,
    pub bitdepth: u8,
    pub __bindgen_anon_1: sprite_s__bindgen_ty_1,
    pub hslices: u8,
    pub vslices: u8,
    pub data: __IncompleteArrayField<u32>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sprite_s__bindgen_ty_1 {
    pub format: u8,
    pub flags: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sprite_s__bindgen_ty_1"][::core::mem::size_of::<sprite_s__bindgen_ty_1>() - 1usize];
    ["Alignment of sprite_s__bindgen_ty_1"]
        [::core::mem::align_of::<sprite_s__bindgen_ty_1>() - 1usize];
    ["Offset of field: sprite_s__bindgen_ty_1::format"]
        [::core::mem::offset_of!(sprite_s__bindgen_ty_1, format) - 0usize];
    ["Offset of field: sprite_s__bindgen_ty_1::flags"]
        [::core::mem::offset_of!(sprite_s__bindgen_ty_1, flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sprite_s"][::core::mem::size_of::<sprite_s>() - 8usize];
    ["Alignment of sprite_s"][::core::mem::align_of::<sprite_s>() - 4usize];
    ["Offset of field: sprite_s::width"][::core::mem::offset_of!(sprite_s, width) - 0usize];
    ["Offset of field: sprite_s::height"][::core::mem::offset_of!(sprite_s, height) - 2usize];
    ["Offset of field: sprite_s::bitdepth"][::core::mem::offset_of!(sprite_s, bitdepth) - 4usize];
    ["Offset of field: sprite_s::hslices"][::core::mem::offset_of!(sprite_s, hslices) - 6usize];
    ["Offset of field: sprite_s::vslices"][::core::mem::offset_of!(sprite_s, vslices) - 7usize];
    ["Offset of field: sprite_s::data"][::core::mem::offset_of!(sprite_s, data) - 8usize];
};
pub type sprite_t = sprite_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sprite_detail_s {
    pub use_main_tex: bool,
    pub blend_factor: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sprite_detail_s"][::core::mem::size_of::<sprite_detail_s>() - 8usize];
    ["Alignment of sprite_detail_s"][::core::mem::align_of::<sprite_detail_s>() - 4usize];
    ["Offset of field: sprite_detail_s::use_main_tex"]
        [::core::mem::offset_of!(sprite_detail_s, use_main_tex) - 0usize];
    ["Offset of field: sprite_detail_s::blend_factor"]
        [::core::mem::offset_of!(sprite_detail_s, blend_factor) - 4usize];
};
pub type sprite_detail_t = sprite_detail_s;
unsafe extern "C" {
    pub fn sprite_load(fn_: *const ::core::ffi::c_char) -> *mut sprite_t;
    pub fn sprite_load_buf(buf: *mut ::core::ffi::c_void, sz: ::core::ffi::c_int) -> *mut sprite_t;
    pub fn sprite_free(sprite: *mut sprite_t);
    pub fn sprite_get_pixels(sprite: *mut sprite_t) -> crate::surface::surface_t;
    pub fn sprite_get_lod_pixels(
        sprite: *mut sprite_t,
        num_level: ::core::ffi::c_int,
    ) -> crate::surface::surface_t;
    pub fn sprite_get_detail_pixels(
        sprite: *mut sprite_t,
        info: *mut sprite_detail_t,
        infoparms: *mut crate::rdpq_tex::rdpq_texparms_t,
    ) -> crate::surface::surface_t;
    pub fn sprite_get_tile(
        sprite: *mut sprite_t,
        h: ::core::ffi::c_int,
        v: ::core::ffi::c_int,
    ) -> crate::surface::surface_t;
    pub fn sprite_get_palette(sprite: *mut sprite_t) -> *mut u16;
    pub fn sprite_get_texparms(
        sprite: *mut sprite_t,
        parms: *mut crate::rdpq_tex::rdpq_texparms_t,
    ) -> bool;
    pub fn sprite_get_lod_count(sprite: *mut sprite_t) -> ::core::ffi::c_int;
    pub fn sprite_fits_tmem(sprite: *mut sprite_t) -> bool;
    pub fn sprite_is_shq(sprite: *mut sprite_t) -> bool;
}
