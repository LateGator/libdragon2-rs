/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone)]
pub union fm_vec3_t {
    pub __bindgen_anon_1: fm_vec3_t__bindgen_ty_1,
    pub v: [f32; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, PartialOrd)]
pub struct fm_vec3_t__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
impl Default for fm_vec3_t {
    #[inline]
    fn default() -> Self {
        Self {
            v: Default::default(),
        }
    }
}
impl core::fmt::Debug for fm_vec3_t {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        unsafe { self.v.fmt(f) }
    }
}
impl PartialEq for fm_vec3_t {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        unsafe { self.v.eq(&other.v) }
    }
}
impl PartialOrd for fm_vec3_t {
    #[inline]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        unsafe { self.v.partial_cmp(&other.v) }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fm_vec3_t__bindgen_ty_1"]
        [::core::mem::size_of::<fm_vec3_t__bindgen_ty_1>() - 12usize];
    ["Alignment of fm_vec3_t__bindgen_ty_1"]
        [::core::mem::align_of::<fm_vec3_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: fm_vec3_t__bindgen_ty_1::x"]
        [::core::mem::offset_of!(fm_vec3_t__bindgen_ty_1, x) - 0usize];
    ["Offset of field: fm_vec3_t__bindgen_ty_1::y"]
        [::core::mem::offset_of!(fm_vec3_t__bindgen_ty_1, y) - 4usize];
    ["Offset of field: fm_vec3_t__bindgen_ty_1::z"]
        [::core::mem::offset_of!(fm_vec3_t__bindgen_ty_1, z) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fm_vec3_t"][::core::mem::size_of::<fm_vec3_t>() - 12usize];
    ["Alignment of fm_vec3_t"][::core::mem::align_of::<fm_vec3_t>() - 4usize];
    ["Offset of field: fm_vec3_t::v"][::core::mem::offset_of!(fm_vec3_t, v) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union fm_vec4_t {
    pub __bindgen_anon_1: fm_vec4_t__bindgen_ty_1,
    pub v: [f32; 4usize],
}
#[repr(C)]
#[derive(Default, Debug, Copy, Clone, PartialEq, PartialOrd)]
pub struct fm_vec4_t__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
impl Default for fm_vec4_t {
    #[inline]
    fn default() -> Self {
        Self {
            v: Default::default(),
        }
    }
}
impl core::fmt::Debug for fm_vec4_t {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        unsafe { self.v.fmt(f) }
    }
}
impl PartialEq for fm_vec4_t {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        unsafe { self.v.eq(&other.v) }
    }
}
impl PartialOrd for fm_vec4_t {
    #[inline]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        unsafe { self.v.partial_cmp(&other.v) }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fm_vec4_t__bindgen_ty_1"]
        [::core::mem::size_of::<fm_vec4_t__bindgen_ty_1>() - 16usize];
    ["Alignment of fm_vec4_t__bindgen_ty_1"]
        [::core::mem::align_of::<fm_vec4_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: fm_vec4_t__bindgen_ty_1::x"]
        [::core::mem::offset_of!(fm_vec4_t__bindgen_ty_1, x) - 0usize];
    ["Offset of field: fm_vec4_t__bindgen_ty_1::y"]
        [::core::mem::offset_of!(fm_vec4_t__bindgen_ty_1, y) - 4usize];
    ["Offset of field: fm_vec4_t__bindgen_ty_1::z"]
        [::core::mem::offset_of!(fm_vec4_t__bindgen_ty_1, z) - 8usize];
    ["Offset of field: fm_vec4_t__bindgen_ty_1::w"]
        [::core::mem::offset_of!(fm_vec4_t__bindgen_ty_1, w) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fm_vec4_t"][::core::mem::size_of::<fm_vec4_t>() - 16usize];
    ["Alignment of fm_vec4_t"][::core::mem::align_of::<fm_vec4_t>() - 4usize];
    ["Offset of field: fm_vec4_t::v"][::core::mem::offset_of!(fm_vec4_t, v) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union fm_quat_t {
    pub __bindgen_anon_1: fm_quat_t__bindgen_ty_1,
    pub v: [f32; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, PartialOrd)]
pub struct fm_quat_t__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
impl Default for fm_quat_t {
    #[inline]
    fn default() -> Self {
        Self {
            v: Default::default(),
        }
    }
}
impl core::fmt::Debug for fm_quat_t {
    #[inline]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        unsafe { self.v.fmt(f) }
    }
}
impl PartialEq for fm_quat_t {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        unsafe { self.v.eq(&other.v) }
    }
}
impl PartialOrd for fm_quat_t {
    #[inline]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        unsafe { self.v.partial_cmp(&other.v) }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fm_quat_t__bindgen_ty_1"]
        [::core::mem::size_of::<fm_quat_t__bindgen_ty_1>() - 16usize];
    ["Alignment of fm_quat_t__bindgen_ty_1"]
        [::core::mem::align_of::<fm_quat_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: fm_quat_t__bindgen_ty_1::x"]
        [::core::mem::offset_of!(fm_quat_t__bindgen_ty_1, x) - 0usize];
    ["Offset of field: fm_quat_t__bindgen_ty_1::y"]
        [::core::mem::offset_of!(fm_quat_t__bindgen_ty_1, y) - 4usize];
    ["Offset of field: fm_quat_t__bindgen_ty_1::z"]
        [::core::mem::offset_of!(fm_quat_t__bindgen_ty_1, z) - 8usize];
    ["Offset of field: fm_quat_t__bindgen_ty_1::w"]
        [::core::mem::offset_of!(fm_quat_t__bindgen_ty_1, w) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fm_quat_t"][::core::mem::size_of::<fm_quat_t>() - 16usize];
    ["Alignment of fm_quat_t"][::core::mem::align_of::<fm_quat_t>() - 4usize];
    ["Offset of field: fm_quat_t::v"][::core::mem::offset_of!(fm_quat_t, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, PartialOrd)]
pub struct fm_mat4_t {
    pub m: [[f32; 4usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fm_mat4_t"][::core::mem::size_of::<fm_mat4_t>() - 64usize];
    ["Alignment of fm_mat4_t"][::core::mem::align_of::<fm_mat4_t>() - 4usize];
    ["Offset of field: fm_mat4_t::m"][::core::mem::offset_of!(fm_mat4_t, m) - 0usize];
};
unsafe extern "C" {
    pub fn fm_vec3_reflect(out: *mut fm_vec3_t, i: *const fm_vec3_t, n: *const fm_vec3_t);
    pub fn fm_vec3_refract(
        out: *mut fm_vec3_t,
        i: *const fm_vec3_t,
        n: *const fm_vec3_t,
        eta: f32,
    ) -> bool;
    pub fn fm_quat_from_euler(out: *mut fm_quat_t, euler: *const f32);
    pub fn fm_quat_from_euler_zyx(out: *mut fm_quat_t, x: f32, y: f32, z: f32);
    pub fn fm_quat_mul(out: *mut fm_quat_t, a: *const fm_quat_t, b: *const fm_quat_t);
    pub fn fm_quat_rotate(
        out: *mut fm_quat_t,
        q: *const fm_quat_t,
        axis: *const fm_vec3_t,
        angle: f32,
    );
    pub fn fm_quat_nlerp(out: *mut fm_quat_t, a: *const fm_quat_t, b: *const fm_quat_t, t: f32);
    pub fn fm_quat_slerp(out: *mut fm_quat_t, a: *const fm_quat_t, b: *const fm_quat_t, t: f32);
    pub fn fm_mat4_rotate(out: *mut fm_mat4_t, rotation: *const fm_quat_t);
    pub fn fm_mat4_from_axis_angle(out: *mut fm_mat4_t, axis: *const fm_vec3_t, angle: f32);
    pub fn fm_mat4_from_srt(
        out: *mut fm_mat4_t,
        scale: *const fm_vec3_t,
        quat: *const fm_quat_t,
        translate: *const fm_vec3_t,
    );
    pub fn fm_mat4_from_srt_euler(
        out: *mut fm_mat4_t,
        scale: *const fm_vec3_t,
        euler: *const f32,
        translate: *const fm_vec3_t,
    );
    pub fn fm_mat4_det(m: *const fm_mat4_t) -> f32;
    pub fn fm_mat4_inverse(out: *mut fm_mat4_t, m: *const fm_mat4_t);
    pub fn fm_mat4_affine_to_normal_mat(out: *mut fm_mat4_t, m: *const fm_mat4_t);
    pub fn fm_mat4_look(
        out: *mut fm_mat4_t,
        eye: *const fm_vec3_t,
        dir: *const fm_vec3_t,
        up: *const fm_vec3_t,
    );
    pub fn fm_mat4_lookat(
        out: *mut fm_mat4_t,
        eye: *const fm_vec3_t,
        target: *const fm_vec3_t,
        up: *const fm_vec3_t,
    );
}
