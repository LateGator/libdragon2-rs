/* automatically generated by rust-bindgen 0.72.0 */

pub const EEPFS_ESUCCESS: u32 = 0;
pub const EEPFS_EBADINPUT: i32 = -1;
pub const EEPFS_ENOFILE: i32 = -2;
pub const EEPFS_EBADFS: i32 = -3;
pub const EEPFS_ENOMEM: i32 = -4;
pub const EEPFS_EBADHANDLE: i32 = -5;
pub const EEPFS_ECONFLICT: i32 = -6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eepfs_entry_t {
    pub path: *const ::core::ffi::c_char,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of eepfs_entry_t"][::core::mem::size_of::<eepfs_entry_t>() - 8usize];
    ["Alignment of eepfs_entry_t"][::core::mem::align_of::<eepfs_entry_t>() - 4usize];
    ["Offset of field: eepfs_entry_t::path"][::core::mem::offset_of!(eepfs_entry_t, path) - 0usize];
    ["Offset of field: eepfs_entry_t::size"][::core::mem::offset_of!(eepfs_entry_t, size) - 4usize];
};
unsafe extern "C" {
    pub fn eepfs_init(entries: *const eepfs_entry_t, count: usize) -> ::core::ffi::c_int;
    pub fn eepfs_close() -> ::core::ffi::c_int;
    pub fn eepfs_read(
        path: *const ::core::ffi::c_char,
        dest: *mut ::core::ffi::c_void,
        size: usize,
    ) -> ::core::ffi::c_int;
    pub fn eepfs_write(
        path: *const ::core::ffi::c_char,
        src: *const ::core::ffi::c_void,
        size: usize,
    ) -> ::core::ffi::c_int;
    pub fn eepfs_erase(path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
    pub fn eepfs_verify_signature() -> bool;
    pub fn eepfs_wipe();
}
