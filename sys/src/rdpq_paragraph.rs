/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        unsafe { ::core::slice::from_raw_parts(self.as_ptr(), len) }
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        unsafe { ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len) }
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdpq_textparms_s {
    _unused: [u8; 0],
}
pub type rdpq_textparms_t = rdpq_textparms_s;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rdpq_paragraph_char_s {
    pub __bindgen_anon_1: rdpq_paragraph_char_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rdpq_paragraph_char_s__bindgen_ty_1 {
    pub __bindgen_anon_1: rdpq_paragraph_char_s__bindgen_ty_1__bindgen_ty_1,
    pub sort_key: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct rdpq_paragraph_char_s__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rdpq_paragraph_char_s__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<rdpq_paragraph_char_s__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of rdpq_paragraph_char_s__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<rdpq_paragraph_char_s__bindgen_ty_1__bindgen_ty_1>() - 1usize];
};
impl rdpq_paragraph_char_s__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn font_id(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_font_id(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn font_id_raw(this: *const Self) -> u8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_font_id_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn atlas_id(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_atlas_id(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn atlas_id_raw(this: *const Self) -> u8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_atlas_id_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn style_id(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_style_id(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn style_id_raw(this: *const Self) -> u8 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_style_id_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn x(&self) -> ::core::ffi::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_x(&mut self, val: ::core::ffi::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn x_raw(this: *const Self) -> ::core::ffi::c_int {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                12u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_x_raw(this: *mut Self, val: ::core::ffi::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn y(&self) -> ::core::ffi::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(36usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_y(&mut self, val: ::core::ffi::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(36usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn y_raw(this: *const Self) -> ::core::ffi::c_int {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                36usize,
                12u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_y_raw(this: *mut Self, val: ::core::ffi::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                36usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn glyph(&self) -> i16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u16) }
    }
    #[inline]
    pub fn set_glyph(&mut self, val: i16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn glyph_raw(this: *const Self) -> i16 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                16u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_glyph_raw(this: *mut Self, val: i16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        font_id: u8,
        atlas_id: u8,
        style_id: u8,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        glyph: i16,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let font_id: u8 = unsafe { ::core::mem::transmute(font_id) };
            font_id as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let atlas_id: u8 = unsafe { ::core::mem::transmute(atlas_id) };
            atlas_id as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let style_id: u8 = unsafe { ::core::mem::transmute(style_id) };
            style_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 12u8, {
            let x: u32 = unsafe { ::core::mem::transmute(x) };
            x as u64
        });
        __bindgen_bitfield_unit.set(36usize, 12u8, {
            let y: u32 = unsafe { ::core::mem::transmute(y) };
            y as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let glyph: u16 = unsafe { ::core::mem::transmute(glyph) };
            glyph as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rdpq_paragraph_char_s__bindgen_ty_1"]
        [::core::mem::size_of::<rdpq_paragraph_char_s__bindgen_ty_1>() - 8usize];
    ["Alignment of rdpq_paragraph_char_s__bindgen_ty_1"]
        [::core::mem::align_of::<rdpq_paragraph_char_s__bindgen_ty_1>() - 4usize];
    ["Offset of field: rdpq_paragraph_char_s__bindgen_ty_1::sort_key"]
        [::core::mem::offset_of!(rdpq_paragraph_char_s__bindgen_ty_1, sort_key) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rdpq_paragraph_char_s"][::core::mem::size_of::<rdpq_paragraph_char_s>() - 8usize];
    ["Alignment of rdpq_paragraph_char_s"]
        [::core::mem::align_of::<rdpq_paragraph_char_s>() - 1usize];
};
pub type rdpq_paragraph_char_t = rdpq_paragraph_char_s;
pub const rdpq_paragraph_flag_e_RDPQ_PARAGRAPH_FLAG_ANTIALIAS_FIX: rdpq_paragraph_flag_e = 1;
pub const rdpq_paragraph_flag_e_RDPQ_PARAGRAPH_FLAG_MALLOC: rdpq_paragraph_flag_e = 2;
pub type rdpq_paragraph_flag_e = ::core::ffi::c_uint;
#[repr(C)]
pub struct rdpq_paragraph_t {
    pub bbox: rdpq_paragraph_t__bindgen_ty_1,
    pub advance_x: f32,
    pub advance_y: f32,
    pub nlines: ::core::ffi::c_int,
    pub nchars: ::core::ffi::c_int,
    pub capacity: ::core::ffi::c_int,
    pub x0: f32,
    pub y0: f32,
    pub flags: ::core::ffi::c_int,
    pub chars: __IncompleteArrayField<rdpq_paragraph_char_t>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rdpq_paragraph_t__bindgen_ty_1 {
    pub x0: f32,
    pub y0: f32,
    pub x1: f32,
    pub y1: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rdpq_paragraph_t__bindgen_ty_1"]
        [::core::mem::size_of::<rdpq_paragraph_t__bindgen_ty_1>() - 16usize];
    ["Alignment of rdpq_paragraph_t__bindgen_ty_1"]
        [::core::mem::align_of::<rdpq_paragraph_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: rdpq_paragraph_t__bindgen_ty_1::x0"]
        [::core::mem::offset_of!(rdpq_paragraph_t__bindgen_ty_1, x0) - 0usize];
    ["Offset of field: rdpq_paragraph_t__bindgen_ty_1::y0"]
        [::core::mem::offset_of!(rdpq_paragraph_t__bindgen_ty_1, y0) - 4usize];
    ["Offset of field: rdpq_paragraph_t__bindgen_ty_1::x1"]
        [::core::mem::offset_of!(rdpq_paragraph_t__bindgen_ty_1, x1) - 8usize];
    ["Offset of field: rdpq_paragraph_t__bindgen_ty_1::y1"]
        [::core::mem::offset_of!(rdpq_paragraph_t__bindgen_ty_1, y1) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rdpq_paragraph_t"][::core::mem::size_of::<rdpq_paragraph_t>() - 48usize];
    ["Alignment of rdpq_paragraph_t"][::core::mem::align_of::<rdpq_paragraph_t>() - 4usize];
    ["Offset of field: rdpq_paragraph_t::bbox"]
        [::core::mem::offset_of!(rdpq_paragraph_t, bbox) - 0usize];
    ["Offset of field: rdpq_paragraph_t::advance_x"]
        [::core::mem::offset_of!(rdpq_paragraph_t, advance_x) - 16usize];
    ["Offset of field: rdpq_paragraph_t::advance_y"]
        [::core::mem::offset_of!(rdpq_paragraph_t, advance_y) - 20usize];
    ["Offset of field: rdpq_paragraph_t::nlines"]
        [::core::mem::offset_of!(rdpq_paragraph_t, nlines) - 24usize];
    ["Offset of field: rdpq_paragraph_t::nchars"]
        [::core::mem::offset_of!(rdpq_paragraph_t, nchars) - 28usize];
    ["Offset of field: rdpq_paragraph_t::capacity"]
        [::core::mem::offset_of!(rdpq_paragraph_t, capacity) - 32usize];
    ["Offset of field: rdpq_paragraph_t::x0"]
        [::core::mem::offset_of!(rdpq_paragraph_t, x0) - 36usize];
    ["Offset of field: rdpq_paragraph_t::y0"]
        [::core::mem::offset_of!(rdpq_paragraph_t, y0) - 40usize];
    ["Offset of field: rdpq_paragraph_t::flags"]
        [::core::mem::offset_of!(rdpq_paragraph_t, flags) - 44usize];
    ["Offset of field: rdpq_paragraph_t::chars"]
        [::core::mem::offset_of!(rdpq_paragraph_t, chars) - 48usize];
};
unsafe extern "C" {
    pub fn rdpq_paragraph_build(
        parms: *const rdpq_textparms_t,
        initial_font_id: u8,
        utf8_text: *const ::core::ffi::c_char,
        nbytes: *mut ::core::ffi::c_int,
    ) -> *mut rdpq_paragraph_t;
    pub fn rdpq_paragraph_render(layout: *const rdpq_paragraph_t, x0: f32, y0: f32);
    pub fn rdpq_paragraph_free(layout: *mut rdpq_paragraph_t);
    pub fn rdpq_paragraph_builder_begin(
        parms: *const rdpq_textparms_t,
        initial_font_id: u8,
        layout: *mut rdpq_paragraph_t,
    );
    pub fn rdpq_paragraph_builder_font(font_id: u8);
    pub fn rdpq_paragraph_builder_style(style_id: u8);
    pub fn rdpq_paragraph_builder_span(
        utf8_text: *const ::core::ffi::c_char,
        nbytes: ::core::ffi::c_int,
    );
    pub fn rdpq_paragraph_builder_newline();
    pub fn rdpq_paragraph_builder_end() -> *mut rdpq_paragraph_t;
}
