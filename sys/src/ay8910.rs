/* automatically generated by rust-bindgen 0.72.0 */

pub const AY8910_DECIMATE: u32 = 3;
pub const AY8910_OUTPUT_STEREO: u32 = 1;
pub const AY8910_VOLUME_ATTENUATE: f64 = 0.8;
pub const AY8910_CENTER_SILENCE: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AYChannel {
    pub tone_period: u16,
    pub tone_vol: u8,
    pub tone_en: u8,
    pub noise_en: u8,
    pub count: u16,
    pub out: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AYChannel"][::core::mem::size_of::<AYChannel>() - 10usize];
    ["Alignment of AYChannel"][::core::mem::align_of::<AYChannel>() - 2usize];
    ["Offset of field: AYChannel::tone_period"]
        [::core::mem::offset_of!(AYChannel, tone_period) - 0usize];
    ["Offset of field: AYChannel::tone_vol"][::core::mem::offset_of!(AYChannel, tone_vol) - 2usize];
    ["Offset of field: AYChannel::tone_en"][::core::mem::offset_of!(AYChannel, tone_en) - 3usize];
    ["Offset of field: AYChannel::noise_en"][::core::mem::offset_of!(AYChannel, noise_en) - 4usize];
    ["Offset of field: AYChannel::count"][::core::mem::offset_of!(AYChannel, count) - 6usize];
    ["Offset of field: AYChannel::out"][::core::mem::offset_of!(AYChannel, out) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AYEnvelope {
    pub period: u16,
    pub shape: u8,
    pub attack: u8,
    pub alternate: u8,
    pub hold: u8,
    pub count: u16,
    pub step: i16,
    pub vol: u8,
    pub holding: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AYEnvelope"][::core::mem::size_of::<AYEnvelope>() - 12usize];
    ["Alignment of AYEnvelope"][::core::mem::align_of::<AYEnvelope>() - 2usize];
    ["Offset of field: AYEnvelope::period"][::core::mem::offset_of!(AYEnvelope, period) - 0usize];
    ["Offset of field: AYEnvelope::shape"][::core::mem::offset_of!(AYEnvelope, shape) - 2usize];
    ["Offset of field: AYEnvelope::attack"][::core::mem::offset_of!(AYEnvelope, attack) - 3usize];
    ["Offset of field: AYEnvelope::alternate"]
        [::core::mem::offset_of!(AYEnvelope, alternate) - 4usize];
    ["Offset of field: AYEnvelope::hold"][::core::mem::offset_of!(AYEnvelope, hold) - 5usize];
    ["Offset of field: AYEnvelope::count"][::core::mem::offset_of!(AYEnvelope, count) - 6usize];
    ["Offset of field: AYEnvelope::step"][::core::mem::offset_of!(AYEnvelope, step) - 8usize];
    ["Offset of field: AYEnvelope::vol"][::core::mem::offset_of!(AYEnvelope, vol) - 10usize];
    ["Offset of field: AYEnvelope::holding"]
        [::core::mem::offset_of!(AYEnvelope, holding) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AYNoise {
    pub period: u8,
    pub count: u8,
    pub out: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AYNoise"][::core::mem::size_of::<AYNoise>() - 8usize];
    ["Alignment of AYNoise"][::core::mem::align_of::<AYNoise>() - 4usize];
    ["Offset of field: AYNoise::period"][::core::mem::offset_of!(AYNoise, period) - 0usize];
    ["Offset of field: AYNoise::count"][::core::mem::offset_of!(AYNoise, count) - 1usize];
    ["Offset of field: AYNoise::out"][::core::mem::offset_of!(AYNoise, out) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AY8910 {
    pub PortRead: ::core::option::Option<unsafe extern "C" fn(idx: ::core::ffi::c_int) -> u8>,
    pub PortWrite: ::core::option::Option<unsafe extern "C" fn(idx: ::core::ffi::c_int, val: u8)>,
    pub addr: u8,
    pub regs: [u8; 16usize],
    pub ch: [AYChannel; 3usize],
    pub ns: AYNoise,
    pub env: AYEnvelope,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AY8910"][::core::mem::size_of::<AY8910>() - 76usize];
    ["Alignment of AY8910"][::core::mem::align_of::<AY8910>() - 4usize];
    ["Offset of field: AY8910::PortRead"][::core::mem::offset_of!(AY8910, PortRead) - 0usize];
    ["Offset of field: AY8910::PortWrite"][::core::mem::offset_of!(AY8910, PortWrite) - 4usize];
    ["Offset of field: AY8910::addr"][::core::mem::offset_of!(AY8910, addr) - 8usize];
    ["Offset of field: AY8910::regs"][::core::mem::offset_of!(AY8910, regs) - 9usize];
    ["Offset of field: AY8910::ch"][::core::mem::offset_of!(AY8910, ch) - 26usize];
    ["Offset of field: AY8910::ns"][::core::mem::offset_of!(AY8910, ns) - 56usize];
    ["Offset of field: AY8910::env"][::core::mem::offset_of!(AY8910, env) - 64usize];
};
unsafe extern "C" {
    pub fn ay8910_reset(ay: *mut AY8910);
    pub fn ay8910_set_ports(
        ay: *mut AY8910,
        PortRead: ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int) -> u8>,
        PortWrite: ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int, arg2: u8)>,
    );
    pub fn ay8910_write_addr(ay: *mut AY8910, addr: u8);
    pub fn ay8910_write_data(ay: *mut AY8910, val: u8);
    pub fn ay8910_read_data(ay: *mut AY8910) -> u8;
    pub fn ay8910_is_mute(ay: *mut AY8910) -> bool;
    pub fn ay8910_gen(
        ay: *mut AY8910,
        out: *mut i16,
        nsamples: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
