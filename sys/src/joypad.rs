/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub const JOYPAD_PORT_COUNT: u32 = 4;
pub const JOYPAD_RANGE_N64_STICK_MAX: u32 = 90;
pub const JOYPAD_RANGE_GCN_STICK_MAX: u32 = 100;
pub const JOYPAD_RANGE_GCN_CSTICK_MAX: u32 = 76;
pub const JOYPAD_RANGE_GCN_TRIGGER_MAX: u32 = 200;
pub const joypad_port_t_JOYPAD_PORT_1: joypad_port_t = 0;
pub const joypad_port_t_JOYPAD_PORT_2: joypad_port_t = 1;
pub const joypad_port_t_JOYPAD_PORT_3: joypad_port_t = 2;
pub const joypad_port_t_JOYPAD_PORT_4: joypad_port_t = 3;
pub type joypad_port_t = ::core::ffi::c_uint;
pub const joypad_style_t_JOYPAD_STYLE_NONE: joypad_style_t = 0;
pub const joypad_style_t_JOYPAD_STYLE_N64: joypad_style_t = 1;
pub const joypad_style_t_JOYPAD_STYLE_GCN: joypad_style_t = 2;
pub const joypad_style_t_JOYPAD_STYLE_MOUSE: joypad_style_t = 3;
pub type joypad_style_t = ::core::ffi::c_uint;
pub const joypad_accessory_type_t_JOYPAD_ACCESSORY_TYPE_NONE: joypad_accessory_type_t = 0;
pub const joypad_accessory_type_t_JOYPAD_ACCESSORY_TYPE_UNKNOWN: joypad_accessory_type_t = 1;
pub const joypad_accessory_type_t_JOYPAD_ACCESSORY_TYPE_CONTROLLER_PAK: joypad_accessory_type_t = 2;
pub const joypad_accessory_type_t_JOYPAD_ACCESSORY_TYPE_RUMBLE_PAK: joypad_accessory_type_t = 3;
pub const joypad_accessory_type_t_JOYPAD_ACCESSORY_TYPE_TRANSFER_PAK: joypad_accessory_type_t = 4;
pub const joypad_accessory_type_t_JOYPAD_ACCESSORY_TYPE_BIO_SENSOR: joypad_accessory_type_t = 5;
pub const joypad_accessory_type_t_JOYPAD_ACCESSORY_TYPE_SNAP_STATION: joypad_accessory_type_t = 6;
pub type joypad_accessory_type_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union joypad_buttons_u {
    pub raw: u16,
    pub __bindgen_anon_1: joypad_buttons_u__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct joypad_buttons_u__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of joypad_buttons_u__bindgen_ty_1"]
        [::core::mem::size_of::<joypad_buttons_u__bindgen_ty_1>() - 2usize];
    ["Alignment of joypad_buttons_u__bindgen_ty_1"]
        [::core::mem::align_of::<joypad_buttons_u__bindgen_ty_1>() - 1usize];
};
impl joypad_buttons_u__bindgen_ty_1 {
    #[inline]
    pub fn a(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_a(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn a_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_a_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn b(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_b(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn b_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_b_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn z(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_z(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn z_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_z_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn start(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn start_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_start_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn d_up(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_d_up(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn d_up_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_d_up_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn d_down(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_d_down(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn d_down_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_d_down_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn d_left(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_d_left(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn d_left_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_d_left_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn d_right(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_d_right(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn d_right_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_d_right_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn y(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_y(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn y_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_y_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn x(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_x(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn x_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_x_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn l(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_l(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn l_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_l_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn r(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_r(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn r_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_r_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn c_up(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_c_up(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn c_up_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_c_up_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn c_down(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_c_down(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn c_down_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_c_down_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn c_left(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_c_left(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn c_left_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_c_left_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn c_right(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_c_right(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn c_right_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_c_right_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        a: ::core::ffi::c_uint,
        b: ::core::ffi::c_uint,
        z: ::core::ffi::c_uint,
        start: ::core::ffi::c_uint,
        d_up: ::core::ffi::c_uint,
        d_down: ::core::ffi::c_uint,
        d_left: ::core::ffi::c_uint,
        d_right: ::core::ffi::c_uint,
        y: ::core::ffi::c_uint,
        x: ::core::ffi::c_uint,
        l: ::core::ffi::c_uint,
        r: ::core::ffi::c_uint,
        c_up: ::core::ffi::c_uint,
        c_down: ::core::ffi::c_uint,
        c_left: ::core::ffi::c_uint,
        c_right: ::core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let a: u32 = unsafe { ::core::mem::transmute(a) };
            a as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let b: u32 = unsafe { ::core::mem::transmute(b) };
            b as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let z: u32 = unsafe { ::core::mem::transmute(z) };
            z as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let start: u32 = unsafe { ::core::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let d_up: u32 = unsafe { ::core::mem::transmute(d_up) };
            d_up as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let d_down: u32 = unsafe { ::core::mem::transmute(d_down) };
            d_down as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let d_left: u32 = unsafe { ::core::mem::transmute(d_left) };
            d_left as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let d_right: u32 = unsafe { ::core::mem::transmute(d_right) };
            d_right as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let y: u32 = unsafe { ::core::mem::transmute(y) };
            y as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let x: u32 = unsafe { ::core::mem::transmute(x) };
            x as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let l: u32 = unsafe { ::core::mem::transmute(l) };
            l as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let r: u32 = unsafe { ::core::mem::transmute(r) };
            r as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let c_up: u32 = unsafe { ::core::mem::transmute(c_up) };
            c_up as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let c_down: u32 = unsafe { ::core::mem::transmute(c_down) };
            c_down as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let c_left: u32 = unsafe { ::core::mem::transmute(c_left) };
            c_left as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let c_right: u32 = unsafe { ::core::mem::transmute(c_right) };
            c_right as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of joypad_buttons_u"][::core::mem::size_of::<joypad_buttons_u>() - 2usize];
    ["Alignment of joypad_buttons_u"][::core::mem::align_of::<joypad_buttons_u>() - 2usize];
    ["Offset of field: joypad_buttons_u::raw"]
        [::core::mem::offset_of!(joypad_buttons_u, raw) - 0usize];
};
pub type joypad_buttons_t = joypad_buttons_u;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct joypad_inputs_s {
    pub btn: joypad_buttons_t,
    pub stick_x: i8,
    pub stick_y: i8,
    pub cstick_x: i8,
    pub cstick_y: i8,
    pub analog_l: u8,
    pub analog_r: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of joypad_inputs_s"][::core::mem::size_of::<joypad_inputs_s>() - 8usize];
    ["Alignment of joypad_inputs_s"][::core::mem::align_of::<joypad_inputs_s>() - 1usize];
    ["Offset of field: joypad_inputs_s::btn"]
        [::core::mem::offset_of!(joypad_inputs_s, btn) - 0usize];
    ["Offset of field: joypad_inputs_s::stick_x"]
        [::core::mem::offset_of!(joypad_inputs_s, stick_x) - 2usize];
    ["Offset of field: joypad_inputs_s::stick_y"]
        [::core::mem::offset_of!(joypad_inputs_s, stick_y) - 3usize];
    ["Offset of field: joypad_inputs_s::cstick_x"]
        [::core::mem::offset_of!(joypad_inputs_s, cstick_x) - 4usize];
    ["Offset of field: joypad_inputs_s::cstick_y"]
        [::core::mem::offset_of!(joypad_inputs_s, cstick_y) - 5usize];
    ["Offset of field: joypad_inputs_s::analog_l"]
        [::core::mem::offset_of!(joypad_inputs_s, analog_l) - 6usize];
    ["Offset of field: joypad_inputs_s::analog_r"]
        [::core::mem::offset_of!(joypad_inputs_s, analog_r) - 7usize];
};
pub type joypad_inputs_t = joypad_inputs_s;
pub const joypad_axis_t_JOYPAD_AXIS_STICK_X: joypad_axis_t = 2;
pub const joypad_axis_t_JOYPAD_AXIS_STICK_Y: joypad_axis_t = 3;
pub const joypad_axis_t_JOYPAD_AXIS_CSTICK_X: joypad_axis_t = 4;
pub const joypad_axis_t_JOYPAD_AXIS_CSTICK_Y: joypad_axis_t = 5;
pub const joypad_axis_t_JOYPAD_AXIS_ANALOG_L: joypad_axis_t = 6;
pub const joypad_axis_t_JOYPAD_AXIS_ANALOG_R: joypad_axis_t = 7;
pub type joypad_axis_t = ::core::ffi::c_uint;
pub const joypad_2d_t_JOYPAD_2D_STICK: joypad_2d_t = 1;
pub const joypad_2d_t_JOYPAD_2D_DPAD: joypad_2d_t = 2;
pub const joypad_2d_t_JOYPAD_2D_C: joypad_2d_t = 4;
pub const joypad_2d_t_JOYPAD_2D_LH: joypad_2d_t = 3;
pub const joypad_2d_t_JOYPAD_2D_RH: joypad_2d_t = 5;
pub const joypad_2d_t_JOYPAD_2D_ANY: joypad_2d_t = 7;
pub type joypad_2d_t = ::core::ffi::c_uint;
pub const joypad_8way_t_JOYPAD_8WAY_NONE: joypad_8way_t = -1;
pub const joypad_8way_t_JOYPAD_8WAY_RIGHT: joypad_8way_t = 0;
pub const joypad_8way_t_JOYPAD_8WAY_UP_RIGHT: joypad_8way_t = 1;
pub const joypad_8way_t_JOYPAD_8WAY_UP: joypad_8way_t = 2;
pub const joypad_8way_t_JOYPAD_8WAY_UP_LEFT: joypad_8way_t = 3;
pub const joypad_8way_t_JOYPAD_8WAY_LEFT: joypad_8way_t = 4;
pub const joypad_8way_t_JOYPAD_8WAY_DOWN_LEFT: joypad_8way_t = 5;
pub const joypad_8way_t_JOYPAD_8WAY_DOWN: joypad_8way_t = 6;
pub const joypad_8way_t_JOYPAD_8WAY_DOWN_RIGHT: joypad_8way_t = 7;
pub type joypad_8way_t = ::core::ffi::c_int;
unsafe extern "C" {
    pub fn joypad_init();
    pub fn joypad_close();
    pub fn joypad_poll();
    pub fn joypad_is_connected(port: joypad_port_t) -> bool;
    pub fn joypad_get_identifier(port: joypad_port_t) -> crate::joybus::joybus_identifier_t;
    pub fn joypad_get_style(port: joypad_port_t) -> joypad_style_t;
    pub fn joypad_get_accessory_type(port: joypad_port_t) -> joypad_accessory_type_t;
    pub fn joypad_get_rumble_supported(port: joypad_port_t) -> bool;
    pub fn joypad_get_rumble_active(port: joypad_port_t) -> bool;
    pub fn joypad_set_rumble_active(port: joypad_port_t, active: bool);
    pub fn joypad_get_inputs(port: joypad_port_t) -> joypad_inputs_t;
    pub fn joypad_get_buttons(port: joypad_port_t) -> joypad_buttons_t;
    pub fn joypad_get_buttons_pressed(port: joypad_port_t) -> joypad_buttons_t;
    pub fn joypad_get_buttons_released(port: joypad_port_t) -> joypad_buttons_t;
    pub fn joypad_get_buttons_held(port: joypad_port_t) -> joypad_buttons_t;
    pub fn joypad_get_direction(port: joypad_port_t, axes: joypad_2d_t) -> joypad_8way_t;
    pub fn joypad_get_axis_pressed(port: joypad_port_t, axis: joypad_axis_t) -> ::core::ffi::c_int;
    pub fn joypad_get_axis_released(port: joypad_port_t, axis: joypad_axis_t)
    -> ::core::ffi::c_int;
    pub fn joypad_get_axis_held(port: joypad_port_t, axis: joypad_axis_t) -> ::core::ffi::c_int;
}
