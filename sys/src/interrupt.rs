/* automatically generated by rust-bindgen 0.72.0 */

pub const interrupt_state_t_INTERRUPTS_UNINITIALIZED: interrupt_state_t = 0;
pub const interrupt_state_t_INTERRUPTS_DISABLED: interrupt_state_t = 1;
pub const interrupt_state_t_INTERRUPTS_ENABLED: interrupt_state_t = 2;
pub type interrupt_state_t = ::core::ffi::c_uint;
unsafe extern "C" {
    pub fn register_AI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_VI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_PI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_DP_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_SI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_SP_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_TI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_CART_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_RESET_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_BB_FLASH_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_BB_AES_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_BB_IDE_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_BB_PI_ERR_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_BB_USB0_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_BB_USB1_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_BB_BTN_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn register_BB_MD_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_AI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_VI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_PI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_DP_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_SI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_SP_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_TI_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_CART_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_RESET_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_BB_FLASH_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_BB_AES_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_BB_IDE_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_BB_PI_ERR_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_BB_USB0_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_BB_USB1_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_BB_BTN_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn unregister_BB_MD_handler(callback: ::core::option::Option<unsafe extern "C" fn()>);
    pub fn set_AI_interrupt(active: ::core::ffi::c_int);
    pub fn set_VI_interrupt(active: ::core::ffi::c_int, line: ::core::ffi::c_ulong);
    pub fn set_PI_interrupt(active: ::core::ffi::c_int);
    pub fn set_DP_interrupt(active: ::core::ffi::c_int);
    pub fn set_SI_interrupt(active: ::core::ffi::c_int);
    pub fn set_SP_interrupt(active: ::core::ffi::c_int);
    pub fn set_TI_interrupt(active: ::core::ffi::c_int);
    pub fn set_CART_interrupt(active: ::core::ffi::c_int);
    pub fn set_RESET_interrupt(active: ::core::ffi::c_int);
    pub fn set_BB_FLASH_interrupt(active: ::core::ffi::c_int);
    pub fn set_BB_AES_interrupt(active: ::core::ffi::c_int);
    pub fn set_BB_IDE_interrupt(active: ::core::ffi::c_int);
    pub fn set_BB_PI_ERR_interrupt(active: ::core::ffi::c_int);
    pub fn set_BB_USB0_interrupt(active: ::core::ffi::c_int);
    pub fn set_BB_USB1_interrupt(active: ::core::ffi::c_int);
    pub fn set_BB_BTN_interrupt(active: ::core::ffi::c_int);
    pub fn set_BB_MD_interrupt(active: ::core::ffi::c_int);
    pub fn exception_reset_time() -> u32;
    pub fn enable_interrupts();
    pub fn disable_interrupts();
    pub fn get_interrupts_state() -> interrupt_state_t;
}
