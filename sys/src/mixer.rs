/* automatically generated by rust-bindgen 0.72.0 */

pub const MIXER_MAX_CHANNELS: u32 = 32;
pub const MIXER_LOOP_OVERREAD: u32 = 64;
pub const WAVEFORM_MAX_LEN: u32 = 536870911;
pub const WAVEFORM_UNKNOWN_LEN: u32 = 536870911;
pub type waveform_t = waveform_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct samplebuffer_s {
    _unused: [u8; 0],
}
pub type samplebuffer_t = samplebuffer_s;
pub type MixerEvent = ::core::option::Option<
    unsafe extern "C" fn(ctx: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
>;
pub type WaveformRead = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::core::ffi::c_void,
        sbuf: *mut samplebuffer_t,
        wpos: ::core::ffi::c_int,
        wlen: ::core::ffi::c_int,
        seeking: bool,
    ),
>;
pub type WaveformStart = ::core::option::Option<
    unsafe extern "C" fn(ctx: *mut ::core::ffi::c_void, sbuf: *mut samplebuffer_t),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waveform_s {
    pub name: *const ::core::ffi::c_char,
    pub bits: u8,
    pub channels: u8,
    pub frequency: f32,
    pub len: ::core::ffi::c_int,
    pub loop_len: ::core::ffi::c_int,
    pub start: WaveformStart,
    pub read: WaveformRead,
    pub ctx: *mut ::core::ffi::c_void,
    pub state_size: ::core::ffi::c_int,
    pub __uuid: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of waveform_s"][::core::mem::size_of::<waveform_s>() - 40usize];
    ["Alignment of waveform_s"][::core::mem::align_of::<waveform_s>() - 4usize];
    ["Offset of field: waveform_s::name"][::core::mem::offset_of!(waveform_s, name) - 0usize];
    ["Offset of field: waveform_s::bits"][::core::mem::offset_of!(waveform_s, bits) - 4usize];
    ["Offset of field: waveform_s::channels"]
        [::core::mem::offset_of!(waveform_s, channels) - 5usize];
    ["Offset of field: waveform_s::frequency"]
        [::core::mem::offset_of!(waveform_s, frequency) - 8usize];
    ["Offset of field: waveform_s::len"][::core::mem::offset_of!(waveform_s, len) - 12usize];
    ["Offset of field: waveform_s::loop_len"]
        [::core::mem::offset_of!(waveform_s, loop_len) - 16usize];
    ["Offset of field: waveform_s::start"][::core::mem::offset_of!(waveform_s, start) - 20usize];
    ["Offset of field: waveform_s::read"][::core::mem::offset_of!(waveform_s, read) - 24usize];
    ["Offset of field: waveform_s::ctx"][::core::mem::offset_of!(waveform_s, ctx) - 28usize];
    ["Offset of field: waveform_s::state_size"]
        [::core::mem::offset_of!(waveform_s, state_size) - 32usize];
    ["Offset of field: waveform_s::__uuid"][::core::mem::offset_of!(waveform_s, __uuid) - 36usize];
};
unsafe extern "C" {
    pub fn mixer_init(num_channels: ::core::ffi::c_int);
    pub fn mixer_close();
    pub fn mixer_set_vol(vol: f32);
    pub fn mixer_ch_set_vol(ch: ::core::ffi::c_int, lvol: f32, rvol: f32);
    pub fn mixer_ch_set_vol_pan(ch: ::core::ffi::c_int, vol: f32, pan: f32);
    pub fn mixer_ch_set_vol_dolby(
        ch: ::core::ffi::c_int,
        fl: f32,
        fr: f32,
        c: f32,
        sl: f32,
        sr: f32,
    );
    pub fn mixer_ch_play(ch: ::core::ffi::c_int, wave: *mut waveform_t);
    pub fn mixer_ch_set_freq(ch: ::core::ffi::c_int, frequency: f32);
    pub fn mixer_ch_set_pos(ch: ::core::ffi::c_int, pos: f64);
    pub fn mixer_ch_get_pos(ch: ::core::ffi::c_int) -> f64;
    pub fn mixer_ch_stop(ch: ::core::ffi::c_int);
    pub fn mixer_ch_playing(ch: ::core::ffi::c_int) -> bool;
    pub fn mixer_ch_playing_waveform(ch: ::core::ffi::c_int) -> *mut waveform_t;
    pub fn mixer_ch_set_limits(
        ch: ::core::ffi::c_int,
        max_bits: ::core::ffi::c_int,
        max_frequency: f32,
        max_buf_sz: ::core::ffi::c_int,
    );
    pub fn mixer_throttle(num_samples: f32);
    pub fn mixer_unthrottle();
    pub fn mixer_poll(out: *mut i16, nsamples: ::core::ffi::c_int);
    pub fn mixer_try_play();
    pub fn mixer_add_event(delay: i64, cb: MixerEvent, ctx: *mut ::core::ffi::c_void);
    pub fn mixer_remove_event(cb: MixerEvent, ctx: *mut ::core::ffi::c_void);
}
