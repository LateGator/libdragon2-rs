/* automatically generated by rust-bindgen 0.72.0 */

pub const TPAK_ERROR_INVALID_ARGUMENT: i32 = -1;
pub const TPAK_ERROR_NO_TPAK: i32 = -2;
pub const TPAK_ERROR_NO_CONTROLLER: i32 = -3;
pub const TPAK_ERROR_UNKNOWN_BEHAVIOUR: i32 = -4;
pub const TPAK_ERROR_NO_CARTRIDGE: i32 = -5;
pub const TPAK_ERROR_ADDRESS_OVERFLOW: i32 = -6;
pub const TPAK_STATUS_READY: u32 = 1;
pub const TPAK_STATUS_WAS_RESET: u32 = 4;
pub const TPAK_STATUS_IS_RESETTING: u32 = 8;
pub const TPAK_STATUS_REMOVED: u32 = 64;
pub const TPAK_STATUS_POWERED: u32 = 128;
pub const gb_cart_type_t_GB_ROM_ONLY: gb_cart_type_t = 0;
pub const gb_cart_type_t_GB_MBC1: gb_cart_type_t = 1;
pub const gb_cart_type_t_GB_MBC1_RAM: gb_cart_type_t = 2;
pub const gb_cart_type_t_GB_MBC1_RAM_BATTERY: gb_cart_type_t = 3;
pub const gb_cart_type_t_GB_MBC2: gb_cart_type_t = 5;
pub const gb_cart_type_t_GB_MBC2_BATTERY: gb_cart_type_t = 6;
pub const gb_cart_type_t_GB_ROM_RAM: gb_cart_type_t = 8;
pub const gb_cart_type_t_GB_ROM_RAM_BATTERY: gb_cart_type_t = 9;
pub const gb_cart_type_t_GB_MMM01: gb_cart_type_t = 11;
pub const gb_cart_type_t_GB_MMM01_RAM: gb_cart_type_t = 12;
pub const gb_cart_type_t_GB_MMM01_RAM_BATTERY: gb_cart_type_t = 13;
pub const gb_cart_type_t_GB_MBC3: gb_cart_type_t = 17;
pub const gb_cart_type_t_GB_MBC3_RAM: gb_cart_type_t = 18;
pub const gb_cart_type_t_GB_MBC3_RAM_BATTERY: gb_cart_type_t = 19;
pub const gb_cart_type_t_GB_MBC3_TIMER_BATTERY: gb_cart_type_t = 15;
pub const gb_cart_type_t_GB_MBC3_TIMER_RAM_BATTERY: gb_cart_type_t = 16;
pub const gb_cart_type_t_GB_MBC5: gb_cart_type_t = 25;
pub const gb_cart_type_t_GB_MBC5_RAM: gb_cart_type_t = 26;
pub const gb_cart_type_t_GB_MBC5_RAM_BATTERY: gb_cart_type_t = 27;
pub const gb_cart_type_t_GB_MBC5_RUMBLE: gb_cart_type_t = 28;
pub const gb_cart_type_t_GB_MBC5_RUMBLE_RAM: gb_cart_type_t = 29;
pub const gb_cart_type_t_GB_MBC5_RUMBLE_RAM_BATTERY: gb_cart_type_t = 30;
pub const gb_cart_type_t_GB_MBC6: gb_cart_type_t = 32;
pub const gb_cart_type_t_GB_MBC7_SENSOR_RUMBLE_RAM_BATTERY: gb_cart_type_t = 34;
pub const gb_cart_type_t_GB_POCKET_CAMERA: gb_cart_type_t = 252;
pub const gb_cart_type_t_GB_BANDAI_TAMA5: gb_cart_type_t = 253;
pub const gb_cart_type_t_GB_HUC3: gb_cart_type_t = 254;
pub const gb_cart_type_t_GB_HUC1_RAM_BATTERY: gb_cart_type_t = 255;
pub type gb_cart_type_t = ::core::ffi::c_uchar;
pub const gb_cart_rom_size_t_GB_ROM_32KB: gb_cart_rom_size_t = 0;
pub const gb_cart_rom_size_t_GB_ROM_64KB: gb_cart_rom_size_t = 1;
pub const gb_cart_rom_size_t_GB_ROM_128KB: gb_cart_rom_size_t = 2;
pub const gb_cart_rom_size_t_GB_ROM_256KB: gb_cart_rom_size_t = 3;
pub const gb_cart_rom_size_t_GB_ROM_512KB: gb_cart_rom_size_t = 4;
pub const gb_cart_rom_size_t_GB_ROM_1MB: gb_cart_rom_size_t = 5;
pub const gb_cart_rom_size_t_GB_ROM_2MB: gb_cart_rom_size_t = 6;
pub const gb_cart_rom_size_t_GB_ROM_4MB: gb_cart_rom_size_t = 7;
pub const gb_cart_rom_size_t_GB_ROM_8MB: gb_cart_rom_size_t = 8;
pub const gb_cart_rom_size_t_GB_ROM_1152KB: gb_cart_rom_size_t = 82;
pub const gb_cart_rom_size_t_GB_ROM_1280KB: gb_cart_rom_size_t = 83;
pub const gb_cart_rom_size_t_GB_ROM_1536KB: gb_cart_rom_size_t = 84;
pub type gb_cart_rom_size_t = ::core::ffi::c_uchar;
pub const gb_cart_ram_size_t_GB_RAM_NONE: gb_cart_ram_size_t = 0;
pub const gb_cart_ram_size_t_GB_RAM_2KB: gb_cart_ram_size_t = 1;
pub const gb_cart_ram_size_t_GB_RAM_8KB: gb_cart_ram_size_t = 2;
pub const gb_cart_ram_size_t_GB_RAM_32KB: gb_cart_ram_size_t = 3;
pub const gb_cart_ram_size_t_GB_RAM_64KB: gb_cart_ram_size_t = 5;
pub const gb_cart_ram_size_t_GB_RAM_128KB: gb_cart_ram_size_t = 4;
pub type gb_cart_ram_size_t = ::core::ffi::c_uchar;
pub const gbc_support_type_GBC_NOT_SUPPORTED: gbc_support_type = 0;
pub const gbc_support_type_GBC_DMG_SUPPORTED: gbc_support_type = 128;
pub const gbc_support_type_GBC_ONLY_SUPPORTED: gbc_support_type = 192;
pub type gbc_support_type = ::core::ffi::c_uchar;
pub const sgb_support_type_SGB_NOT_ENHANCED: sgb_support_type = 0;
pub const sgb_support_type_SGB_ENHANCED: sgb_support_type = 3;
pub type sgb_support_type = ::core::ffi::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct old_gbc_title {
    pub title: [u8; 15usize],
    pub gbc_support: gbc_support_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of old_gbc_title"][::core::mem::size_of::<old_gbc_title>() - 16usize];
    ["Alignment of old_gbc_title"][::core::mem::align_of::<old_gbc_title>() - 1usize];
    ["Offset of field: old_gbc_title::title"]
        [::core::mem::offset_of!(old_gbc_title, title) - 0usize];
    ["Offset of field: old_gbc_title::gbc_support"]
        [::core::mem::offset_of!(old_gbc_title, gbc_support) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct new_gbc_title {
    pub title: [u8; 11usize],
    pub manufacturer_code: [u8; 4usize],
    pub gbc_support: gbc_support_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of new_gbc_title"][::core::mem::size_of::<new_gbc_title>() - 16usize];
    ["Alignment of new_gbc_title"][::core::mem::align_of::<new_gbc_title>() - 1usize];
    ["Offset of field: new_gbc_title::title"]
        [::core::mem::offset_of!(new_gbc_title, title) - 0usize];
    ["Offset of field: new_gbc_title::manufacturer_code"]
        [::core::mem::offset_of!(new_gbc_title, manufacturer_code) - 11usize];
    ["Offset of field: new_gbc_title::gbc_support"]
        [::core::mem::offset_of!(new_gbc_title, gbc_support) - 15usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gameboy_cartridge_header {
    pub entry_point: [u8; 4usize],
    pub logo: [u8; 48usize],
    pub __bindgen_anon_1: gameboy_cartridge_header__bindgen_ty_1,
    pub new_licensee_code: u16,
    pub is_sgb_supported: sgb_support_type,
    pub cartridge_type: gb_cart_type_t,
    pub rom_size_code: gb_cart_rom_size_t,
    pub ram_size_code: gb_cart_ram_size_t,
    pub destination_code: u8,
    pub old_licensee_code: u8,
    pub version_number: u8,
    pub header_checksum: u8,
    pub global_checksum: u16,
    pub overflow: [u8; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gameboy_cartridge_header__bindgen_ty_1 {
    pub title: [u8; 16usize],
    pub old_title: old_gbc_title,
    pub new_title: new_gbc_title,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gameboy_cartridge_header__bindgen_ty_1"]
        [::core::mem::size_of::<gameboy_cartridge_header__bindgen_ty_1>() - 16usize];
    ["Alignment of gameboy_cartridge_header__bindgen_ty_1"]
        [::core::mem::align_of::<gameboy_cartridge_header__bindgen_ty_1>() - 1usize];
    ["Offset of field: gameboy_cartridge_header__bindgen_ty_1::title"]
        [::core::mem::offset_of!(gameboy_cartridge_header__bindgen_ty_1, title) - 0usize];
    ["Offset of field: gameboy_cartridge_header__bindgen_ty_1::old_title"]
        [::core::mem::offset_of!(gameboy_cartridge_header__bindgen_ty_1, old_title) - 0usize];
    ["Offset of field: gameboy_cartridge_header__bindgen_ty_1::new_title"]
        [::core::mem::offset_of!(gameboy_cartridge_header__bindgen_ty_1, new_title) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gameboy_cartridge_header"]
        [::core::mem::size_of::<gameboy_cartridge_header>() - 96usize];
    ["Alignment of gameboy_cartridge_header"]
        [::core::mem::align_of::<gameboy_cartridge_header>() - 2usize];
    ["Offset of field: gameboy_cartridge_header::entry_point"]
        [::core::mem::offset_of!(gameboy_cartridge_header, entry_point) - 0usize];
    ["Offset of field: gameboy_cartridge_header::logo"]
        [::core::mem::offset_of!(gameboy_cartridge_header, logo) - 4usize];
    ["Offset of field: gameboy_cartridge_header::new_licensee_code"]
        [::core::mem::offset_of!(gameboy_cartridge_header, new_licensee_code) - 68usize];
    ["Offset of field: gameboy_cartridge_header::is_sgb_supported"]
        [::core::mem::offset_of!(gameboy_cartridge_header, is_sgb_supported) - 70usize];
    ["Offset of field: gameboy_cartridge_header::cartridge_type"]
        [::core::mem::offset_of!(gameboy_cartridge_header, cartridge_type) - 71usize];
    ["Offset of field: gameboy_cartridge_header::rom_size_code"]
        [::core::mem::offset_of!(gameboy_cartridge_header, rom_size_code) - 72usize];
    ["Offset of field: gameboy_cartridge_header::ram_size_code"]
        [::core::mem::offset_of!(gameboy_cartridge_header, ram_size_code) - 73usize];
    ["Offset of field: gameboy_cartridge_header::destination_code"]
        [::core::mem::offset_of!(gameboy_cartridge_header, destination_code) - 74usize];
    ["Offset of field: gameboy_cartridge_header::old_licensee_code"]
        [::core::mem::offset_of!(gameboy_cartridge_header, old_licensee_code) - 75usize];
    ["Offset of field: gameboy_cartridge_header::version_number"]
        [::core::mem::offset_of!(gameboy_cartridge_header, version_number) - 76usize];
    ["Offset of field: gameboy_cartridge_header::header_checksum"]
        [::core::mem::offset_of!(gameboy_cartridge_header, header_checksum) - 77usize];
    ["Offset of field: gameboy_cartridge_header::global_checksum"]
        [::core::mem::offset_of!(gameboy_cartridge_header, global_checksum) - 78usize];
    ["Offset of field: gameboy_cartridge_header::overflow"]
        [::core::mem::offset_of!(gameboy_cartridge_header, overflow) - 80usize];
};
unsafe extern "C" {
    pub fn tpak_init(controller: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn tpak_set_value(
        controller: ::core::ffi::c_int,
        address: u16,
        value: u8,
    ) -> ::core::ffi::c_int;
    pub fn tpak_set_bank(
        controller: ::core::ffi::c_int,
        bank: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    pub fn tpak_set_power(controller: ::core::ffi::c_int, power_state: bool) -> ::core::ffi::c_int;
    pub fn tpak_set_access(
        controller: ::core::ffi::c_int,
        access_state: bool,
    ) -> ::core::ffi::c_int;
    pub fn tpak_get_status(controller: ::core::ffi::c_int) -> u8;
    pub fn tpak_get_cartridge_header(
        controller: ::core::ffi::c_int,
        header: *mut gameboy_cartridge_header,
    ) -> ::core::ffi::c_int;
    pub fn tpak_check_header(header: *mut gameboy_cartridge_header) -> bool;
    pub fn tpak_write(
        controller: ::core::ffi::c_int,
        address: u16,
        data: *mut u8,
        size: u16,
    ) -> ::core::ffi::c_int;
    pub fn tpak_read(
        controller: ::core::ffi::c_int,
        address: u16,
        buffer: *mut u8,
        size: u16,
    ) -> ::core::ffi::c_int;
}
