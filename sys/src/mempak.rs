/* automatically generated by rust-bindgen 0.72.0 */

pub const MEMPAK_BLOCK_SIZE: u32 = 256;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry_structure {
    pub vendor: u32,
    pub game_id: u16,
    pub inode: u16,
    pub region: u8,
    pub blocks: u8,
    pub valid: u8,
    pub entry_id: u8,
    pub name: [::core::ffi::c_char; 62usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of entry_structure"][::core::mem::size_of::<entry_structure>() - 76usize];
    ["Alignment of entry_structure"][::core::mem::align_of::<entry_structure>() - 4usize];
    ["Offset of field: entry_structure::vendor"]
        [::core::mem::offset_of!(entry_structure, vendor) - 0usize];
    ["Offset of field: entry_structure::game_id"]
        [::core::mem::offset_of!(entry_structure, game_id) - 4usize];
    ["Offset of field: entry_structure::inode"]
        [::core::mem::offset_of!(entry_structure, inode) - 6usize];
    ["Offset of field: entry_structure::region"]
        [::core::mem::offset_of!(entry_structure, region) - 8usize];
    ["Offset of field: entry_structure::blocks"]
        [::core::mem::offset_of!(entry_structure, blocks) - 9usize];
    ["Offset of field: entry_structure::valid"]
        [::core::mem::offset_of!(entry_structure, valid) - 10usize];
    ["Offset of field: entry_structure::entry_id"]
        [::core::mem::offset_of!(entry_structure, entry_id) - 11usize];
    ["Offset of field: entry_structure::name"]
        [::core::mem::offset_of!(entry_structure, name) - 12usize];
};
pub type entry_structure_t = entry_structure;
unsafe extern "C" {
    pub fn read_mempak_sector(
        controller: ::core::ffi::c_int,
        sector: ::core::ffi::c_int,
        sector_data: *mut u8,
    ) -> ::core::ffi::c_int;
    pub fn write_mempak_sector(
        controller: ::core::ffi::c_int,
        sector: ::core::ffi::c_int,
        sector_data: *mut u8,
    ) -> ::core::ffi::c_int;
    pub fn validate_mempak(controller: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn get_mempak_free_space(controller: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn get_mempak_entry(
        controller: ::core::ffi::c_int,
        entry: ::core::ffi::c_int,
        entry_data: *mut entry_structure_t,
    ) -> ::core::ffi::c_int;
    pub fn format_mempak(controller: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn read_mempak_entry_data(
        controller: ::core::ffi::c_int,
        entry: *mut entry_structure_t,
        data: *mut u8,
    ) -> ::core::ffi::c_int;
    pub fn write_mempak_entry_data(
        controller: ::core::ffi::c_int,
        entry: *mut entry_structure_t,
        data: *mut u8,
    ) -> ::core::ffi::c_int;
    pub fn delete_mempak_entry(
        controller: ::core::ffi::c_int,
        entry: *mut entry_structure_t,
    ) -> ::core::ffi::c_int;
}
