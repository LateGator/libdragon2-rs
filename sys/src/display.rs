/* automatically generated by rust-bindgen 0.72.0 */

pub const VI_CRT_MARGIN: f64 = 0.05;
pub const interlace_mode_t_INTERLACE_OFF: interlace_mode_t = 0;
pub const interlace_mode_t_INTERLACE_HALF: interlace_mode_t = 1;
pub const interlace_mode_t_INTERLACE_FULL: interlace_mode_t = 2;
pub type interlace_mode_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resolution_t {
    pub width: i32,
    pub height: i32,
    pub interlaced: interlace_mode_t,
    pub aspect_ratio: f32,
    pub overscan_margin: f32,
    pub pal60: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of resolution_t"][::core::mem::size_of::<resolution_t>() - 24usize];
    ["Alignment of resolution_t"][::core::mem::align_of::<resolution_t>() - 4usize];
    ["Offset of field: resolution_t::width"][::core::mem::offset_of!(resolution_t, width) - 0usize];
    ["Offset of field: resolution_t::height"]
        [::core::mem::offset_of!(resolution_t, height) - 4usize];
    ["Offset of field: resolution_t::interlaced"]
        [::core::mem::offset_of!(resolution_t, interlaced) - 8usize];
    ["Offset of field: resolution_t::aspect_ratio"]
        [::core::mem::offset_of!(resolution_t, aspect_ratio) - 12usize];
    ["Offset of field: resolution_t::overscan_margin"]
        [::core::mem::offset_of!(resolution_t, overscan_margin) - 16usize];
    ["Offset of field: resolution_t::pal60"]
        [::core::mem::offset_of!(resolution_t, pal60) - 20usize];
};
pub const bitdepth_t_DEPTH_16_BPP: bitdepth_t = 0;
pub const bitdepth_t_DEPTH_32_BPP: bitdepth_t = 1;
pub type bitdepth_t = ::core::ffi::c_uint;
pub const gamma_t_GAMMA_NONE: gamma_t = 0;
pub const gamma_t_GAMMA_CORRECT: gamma_t = 4;
pub const gamma_t_GAMMA_CORRECT_DITHER: gamma_t = 12;
pub type gamma_t = ::core::ffi::c_uint;
pub const filter_options_t_FILTERS_DISABLED: filter_options_t = 0;
pub const filter_options_t_FILTERS_RESAMPLE: filter_options_t = 1;
pub const filter_options_t_FILTERS_DEDITHER: filter_options_t = 2;
pub const filter_options_t_FILTERS_RESAMPLE_ANTIALIAS: filter_options_t = 3;
pub const filter_options_t_FILTERS_RESAMPLE_ANTIALIAS_DEDITHER: filter_options_t = 4;
pub type filter_options_t = ::core::ffi::c_uint;
pub use self::filter_options_t as antialias_t;
pub type display_context_t = *mut crate::surface::surface_t;
unsafe extern "C" {
    pub fn display_init(
        res: resolution_t,
        bit: bitdepth_t,
        num_buffers: u32,
        gamma: gamma_t,
        filters: filter_options_t,
    );
    pub fn display_close();
    pub fn display_get() -> *mut crate::surface::surface_t;
    pub fn display_try_get() -> *mut crate::surface::surface_t;
    pub fn display_show(surf: *mut crate::surface::surface_t);
    pub fn display_get_zbuf() -> *mut crate::surface::surface_t;
    pub fn display_get_width() -> u32;
    pub fn display_get_height() -> u32;
    pub fn display_get_bitdepth() -> u32;
    pub fn display_get_num_buffers() -> u32;
    pub fn display_get_refresh_rate() -> f32;
    pub fn display_get_fps() -> f32;
    pub fn display_get_delta_time() -> f32;
    pub fn display_set_fps_limit(fps: f32);
    pub fn display_get_current_framebuffer() -> crate::surface::surface_t;
}
