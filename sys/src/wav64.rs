/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wav64_state_s {
    _unused: [u8; 0],
}
pub type wav64_state_t = wav64_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wav64_s {
    pub wave: crate::mixer::waveform_t,
    pub st: *mut wav64_state_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wav64_s"][::core::mem::size_of::<wav64_s>() - 44usize];
    ["Alignment of wav64_s"][::core::mem::align_of::<wav64_s>() - 4usize];
    ["Offset of field: wav64_s::wave"][::core::mem::offset_of!(wav64_s, wave) - 0usize];
    ["Offset of field: wav64_s::st"][::core::mem::offset_of!(wav64_s, st) - 40usize];
};
pub type wav64_t = wav64_s;
pub const wav64_streaming_mode_t_WAV64_STREAMING_FULL: wav64_streaming_mode_t = 0;
pub const wav64_streaming_mode_t_WAV64_STREAMING_NONE: wav64_streaming_mode_t = 1;
pub type wav64_streaming_mode_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wav64_loadparms_s {
    pub streaming_mode: wav64_streaming_mode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wav64_loadparms_s"][::core::mem::size_of::<wav64_loadparms_s>() - 4usize];
    ["Alignment of wav64_loadparms_s"][::core::mem::align_of::<wav64_loadparms_s>() - 4usize];
    ["Offset of field: wav64_loadparms_s::streaming_mode"]
        [::core::mem::offset_of!(wav64_loadparms_s, streaming_mode) - 0usize];
};
pub type wav64_loadparms_t = wav64_loadparms_s;
unsafe extern "C" {
    pub fn __wav64_init_compression_lvl3();
    pub fn wav64_open(wav: *mut wav64_t, fn_: *const ::core::ffi::c_char);
    pub fn wav64_load(
        fn_: *const ::core::ffi::c_char,
        parms: *mut wav64_loadparms_t,
    ) -> *mut wav64_t;
    pub fn wav64_set_loop(wav: *mut wav64_t, loop_: bool);
    pub fn wav64_play(wav: *mut wav64_t, ch: ::core::ffi::c_int);
    pub fn wav64_get_bitrate(wav: *mut wav64_t) -> ::core::ffi::c_int;
    pub fn wav64_close(wav: *mut wav64_t);
}
