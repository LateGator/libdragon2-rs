/* automatically generated by rust-bindgen 0.72.0 */

pub const model64_anim_slot_t_MODEL64_ANIM_SLOT_0: model64_anim_slot_t = 0;
pub const model64_anim_slot_t_MODEL64_ANIM_SLOT_1: model64_anim_slot_t = 1;
pub const model64_anim_slot_t_MODEL64_ANIM_SLOT_2: model64_anim_slot_t = 2;
pub const model64_anim_slot_t_MODEL64_ANIM_SLOT_3: model64_anim_slot_t = 3;
pub type model64_anim_slot_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct model64_s {
    _unused: [u8; 0],
}
pub type model64_t = model64_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mesh_s {
    _unused: [u8; 0],
}
pub type mesh_t = mesh_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct primitive_s {
    _unused: [u8; 0],
}
pub type primitive_t = primitive_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct model64_node_s {
    _unused: [u8; 0],
}
pub type model64_node_t = model64_node_s;
unsafe extern "C" {
    pub fn model64_load(fn_: *const ::core::ffi::c_char) -> *mut model64_t;
    pub fn model64_load_buf(
        buf: *mut ::core::ffi::c_void,
        sz: ::core::ffi::c_int,
    ) -> *mut model64_t;
    pub fn model64_free(model: *mut model64_t);
    pub fn model64_clone(model: *mut model64_t) -> *mut model64_t;
    pub fn model64_get_mesh_count(model: *mut model64_t) -> u32;
    pub fn model64_get_mesh(model: *mut model64_t, mesh_index: u32) -> *mut mesh_t;
    pub fn model64_get_node_count(model: *mut model64_t) -> u32;
    pub fn model64_get_node(model: *mut model64_t, node_index: u32) -> *mut model64_node_t;
    pub fn model64_search_node(
        model: *mut model64_t,
        name: *const ::core::ffi::c_char,
    ) -> *mut model64_node_t;
    pub fn model64_set_node_pos(
        model: *mut model64_t,
        node: *mut model64_node_t,
        x: f32,
        y: f32,
        z: f32,
    );
    pub fn model64_set_node_rot(
        model: *mut model64_t,
        node: *mut model64_node_t,
        x: f32,
        y: f32,
        z: f32,
    );
    pub fn model64_set_node_rot_quat(
        model: *mut model64_t,
        node: *mut model64_node_t,
        x: f32,
        y: f32,
        z: f32,
        w: f32,
    );
    pub fn model64_set_node_scale(
        model: *mut model64_t,
        node: *mut model64_node_t,
        x: f32,
        y: f32,
        z: f32,
    );
    pub fn model64_get_node_world_mtx(
        model: *mut model64_t,
        node: *mut model64_node_t,
        dst: *mut f32,
    );
    pub fn model64_get_primitive_count(mesh: *mut mesh_t) -> u32;
    pub fn model64_get_primitive(mesh: *mut mesh_t, primitive_index: u32) -> *mut primitive_t;
    pub fn model64_draw(model: *mut model64_t);
    pub fn model64_draw_mesh(mesh: *mut mesh_t);
    pub fn model64_draw_node(model: *mut model64_t, node: *mut model64_node_t);
    pub fn model64_draw_primitive(primitive: *mut primitive_t);
    pub fn model64_anim_play(
        model: *mut model64_t,
        anim: *const ::core::ffi::c_char,
        slot: model64_anim_slot_t,
        paused: bool,
        start_time: f32,
    );
    pub fn model64_anim_stop(model: *mut model64_t, slot: model64_anim_slot_t);
    pub fn model64_anim_get_length(model: *mut model64_t, anim: *const ::core::ffi::c_char) -> f32;
    pub fn model64_anim_get_time(model: *mut model64_t, slot: model64_anim_slot_t) -> f32;
    pub fn model64_anim_set_time(
        model: *mut model64_t,
        slot: model64_anim_slot_t,
        time: f32,
    ) -> f32;
    pub fn model64_anim_set_speed(
        model: *mut model64_t,
        slot: model64_anim_slot_t,
        speed: f32,
    ) -> f32;
    pub fn model64_anim_set_loop(
        model: *mut model64_t,
        slot: model64_anim_slot_t,
        loop_: bool,
    ) -> bool;
    pub fn model64_anim_set_pause(
        model: *mut model64_t,
        slot: model64_anim_slot_t,
        paused: bool,
    ) -> bool;
    pub fn model64_update(model: *mut model64_t, deltatime: f32);
}
