/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpakfs_stats_t {
    pub pages: cpakfs_stats_t__bindgen_ty_1,
    pub notes: cpakfs_stats_t__bindgen_ty_2,
    pub num_banks: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpakfs_stats_t__bindgen_ty_1 {
    pub total: ::core::ffi::c_int,
    pub used: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpakfs_stats_t__bindgen_ty_1"]
        [::core::mem::size_of::<cpakfs_stats_t__bindgen_ty_1>() - 8usize];
    ["Alignment of cpakfs_stats_t__bindgen_ty_1"]
        [::core::mem::align_of::<cpakfs_stats_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: cpakfs_stats_t__bindgen_ty_1::total"]
        [::core::mem::offset_of!(cpakfs_stats_t__bindgen_ty_1, total) - 0usize];
    ["Offset of field: cpakfs_stats_t__bindgen_ty_1::used"]
        [::core::mem::offset_of!(cpakfs_stats_t__bindgen_ty_1, used) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpakfs_stats_t__bindgen_ty_2 {
    pub total: ::core::ffi::c_int,
    pub used: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpakfs_stats_t__bindgen_ty_2"]
        [::core::mem::size_of::<cpakfs_stats_t__bindgen_ty_2>() - 8usize];
    ["Alignment of cpakfs_stats_t__bindgen_ty_2"]
        [::core::mem::align_of::<cpakfs_stats_t__bindgen_ty_2>() - 4usize];
    ["Offset of field: cpakfs_stats_t__bindgen_ty_2::total"]
        [::core::mem::offset_of!(cpakfs_stats_t__bindgen_ty_2, total) - 0usize];
    ["Offset of field: cpakfs_stats_t__bindgen_ty_2::used"]
        [::core::mem::offset_of!(cpakfs_stats_t__bindgen_ty_2, used) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpakfs_stats_t"][::core::mem::size_of::<cpakfs_stats_t>() - 20usize];
    ["Alignment of cpakfs_stats_t"][::core::mem::align_of::<cpakfs_stats_t>() - 4usize];
    ["Offset of field: cpakfs_stats_t::pages"]
        [::core::mem::offset_of!(cpakfs_stats_t, pages) - 0usize];
    ["Offset of field: cpakfs_stats_t::notes"]
        [::core::mem::offset_of!(cpakfs_stats_t, notes) - 8usize];
    ["Offset of field: cpakfs_stats_t::num_banks"]
        [::core::mem::offset_of!(cpakfs_stats_t, num_banks) - 16usize];
};
pub const cpakfs_issue_level_t_CPAKFS_LEVEL_INFO: cpakfs_issue_level_t = 0;
pub const cpakfs_issue_level_t_CPAKFS_LEVEL_WARNING: cpakfs_issue_level_t = 1;
pub const cpakfs_issue_level_t_CPAKFS_LEVEL_ERROR: cpakfs_issue_level_t = 2;
pub type cpakfs_issue_level_t = ::core::ffi::c_uint;
pub const cpakfs_issue_t_CPAKFS_ISSUE_FSID_CHECKSUM_FAILURE: cpakfs_issue_t = 1;
pub const cpakfs_issue_t_CPAKFS_ISSUE_FSID_DEXDRIVE: cpakfs_issue_t = 2;
pub const cpakfs_issue_t_CPAKFS_ISSUE_FSID_CORRUPTED_BACKUP: cpakfs_issue_t = 3;
pub const cpakfs_issue_t_CPAKFS_ISSUE_FSID_WRONG_DEVICE_ID: cpakfs_issue_t = 4;
pub const cpakfs_issue_t_CPAKFS_ISSUE_FAT_CHECKSUM_FAILURE: cpakfs_issue_t = 5;
pub const cpakfs_issue_t_CPAKFS_ISSUE_FAT_UNSYNCHRONIZED: cpakfs_issue_t = 6;
pub const cpakfs_issue_t_CPAKFS_ISSUE_FAT_INVALID_RESERVED: cpakfs_issue_t = 7;
pub const cpakfs_issue_t_CPAKFS_ISSUE_FAT_INVALID_ENTRY: cpakfs_issue_t = 8;
pub const cpakfs_issue_t_CPAKFS_ISSUE_FAT_INVALID_BANK: cpakfs_issue_t = 9;
pub const cpakfs_issue_t_CPAKFS_ISSUE_NOTE_INVALID_GAMECODE: cpakfs_issue_t = 10;
pub const cpakfs_issue_t_CPAKFS_ISSUE_NOTE_INVALID_PUBCODE: cpakfs_issue_t = 11;
pub const cpakfs_issue_t_CPAKFS_ISSUE_NOTE_INVALID_FIRST_PAGE: cpakfs_issue_t = 12;
pub const cpakfs_issue_t_CPAKFS_ISSUE_NOTE_INVALID_CHARSET: cpakfs_issue_t = 13;
pub const cpakfs_issue_t_CPAKFS_ISSUE_NOTE_NOT_OCCUPTED: cpakfs_issue_t = 14;
pub const cpakfs_issue_t_CPAKFS_ISSUE_CHAIN_INFINITE_LOOP: cpakfs_issue_t = 15;
pub const cpakfs_issue_t_CPAKFS_ISSUE_CHAIN_NO_TERMINATOR: cpakfs_issue_t = 16;
pub const cpakfs_issue_t_CPAKFS_ISSUE_CHAIN_COLLISION: cpakfs_issue_t = 17;
pub const cpakfs_issue_t_CPAKFS_ISSUE_CHAIN_ORPHANED: cpakfs_issue_t = 18;
pub type cpakfs_issue_t = ::core::ffi::c_uint;
pub type cpakfs_report_fn = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::core::ffi::c_void,
        issue: cpakfs_issue_t,
        level: cpakfs_issue_level_t,
        fmt: *const ::core::ffi::c_char,
        ...
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpakfs_path_t {
    pub gamecode: [u8; 4usize],
    pub pubcode: [u8; 2usize],
    pub filename: [u8; 16usize],
    pub ext: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpakfs_path_t"][::core::mem::size_of::<cpakfs_path_t>() - 26usize];
    ["Alignment of cpakfs_path_t"][::core::mem::align_of::<cpakfs_path_t>() - 1usize];
    ["Offset of field: cpakfs_path_t::gamecode"]
        [::core::mem::offset_of!(cpakfs_path_t, gamecode) - 0usize];
    ["Offset of field: cpakfs_path_t::pubcode"]
        [::core::mem::offset_of!(cpakfs_path_t, pubcode) - 4usize];
    ["Offset of field: cpakfs_path_t::filename"]
        [::core::mem::offset_of!(cpakfs_path_t, filename) - 6usize];
    ["Offset of field: cpakfs_path_t::ext"][::core::mem::offset_of!(cpakfs_path_t, ext) - 22usize];
};
pub const cpakfs_parse_err_t_CPAKFS_PARSE_OK: cpakfs_parse_err_t = 0;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_GAMECODE_TOO_SHORT: cpakfs_parse_err_t = -1;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_GAMECODE_TOO_LONG: cpakfs_parse_err_t = -2;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_GAMECODE_CHAR: cpakfs_parse_err_t = -3;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_PUBCODE_TOO_SHORT: cpakfs_parse_err_t = -4;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_PUBCODE_TOO_LONG: cpakfs_parse_err_t = -5;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_PUBCODE_CHAR: cpakfs_parse_err_t = -6;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_FILENAME_TOO_SHORT: cpakfs_parse_err_t = -7;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_FILENAME_TOO_LONG: cpakfs_parse_err_t = -8;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_FILENAME_CHAR: cpakfs_parse_err_t = -9;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_EXTENSION_TOO_LONG: cpakfs_parse_err_t = -10;
pub const cpakfs_parse_err_t_CPAKFS_PARSE_ERR_EXTENSION_CHAR: cpakfs_parse_err_t = -11;
pub type cpakfs_parse_err_t = ::core::ffi::c_int;
unsafe extern "C" {
    pub fn cpakfs_mount(
        port: crate::joypad::joypad_port_t,
        prefix: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
    pub fn cpakfs_unmount(port: crate::joypad::joypad_port_t) -> ::core::ffi::c_int;
    pub fn cpakfs_get_serial(
        port: crate::joypad::joypad_port_t,
        serial: *mut u8,
    ) -> ::core::ffi::c_int;
    pub fn cpakfs_get_stats(
        port: crate::joypad::joypad_port_t,
        stats: *mut cpakfs_stats_t,
    ) -> ::core::ffi::c_int;
    pub fn cpakfs_fsck(
        port: crate::joypad::joypad_port_t,
        fix_errors: bool,
        report: cpakfs_report_fn,
        report_ctx: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
    pub fn cpakfs_format(port: crate::joypad::joypad_port_t, erase: bool) -> ::core::ffi::c_int;
    pub fn cpakfs_path_parse(
        utf8_fullname: *const ::core::ffi::c_char,
        path: *mut cpakfs_path_t,
        error_pos: *mut *const ::core::ffi::c_char,
    ) -> cpakfs_parse_err_t;
    pub fn cpakfs_path_format(
        path: *const cpakfs_path_t,
        utf8_fullname: *mut ::core::ffi::c_char,
        buflen: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
