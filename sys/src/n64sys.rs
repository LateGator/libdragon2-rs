/* automatically generated by rust-bindgen 0.72.0 */

pub type phys_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct heap_stats_t {
    pub total: ::core::ffi::c_int,
    pub used: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of heap_stats_t"][::core::mem::size_of::<heap_stats_t>() - 8usize];
    ["Alignment of heap_stats_t"][::core::mem::align_of::<heap_stats_t>() - 4usize];
    ["Offset of field: heap_stats_t::total"][::core::mem::offset_of!(heap_stats_t, total) - 0usize];
    ["Offset of field: heap_stats_t::used"][::core::mem::offset_of!(heap_stats_t, used) - 4usize];
};
pub const tv_type_t_TV_PAL: tv_type_t = 0;
pub const tv_type_t_TV_NTSC: tv_type_t = 1;
pub const tv_type_t_TV_MPAL: tv_type_t = 2;
pub type tv_type_t = ::core::ffi::c_uint;
pub const reset_type_t_RESET_COLD: reset_type_t = 0;
pub const reset_type_t_RESET_WARM: reset_type_t = 1;
pub type reset_type_t = ::core::ffi::c_uint;
unsafe extern "C" {
    pub static mut __boot_memsize: ::core::ffi::c_int;
    pub static mut __boot_consoletype: ::core::ffi::c_int;
    pub static mut __boot_tvtype: ::core::ffi::c_int;
    pub static mut __libdragon_text_start: [::core::ffi::c_char; 0usize];
    pub static mut __rom_end: [::core::ffi::c_char; 0usize];
    pub static mut __bss_end: [::core::ffi::c_char; 0usize];
    pub fn get_ticks() -> u64;
    pub fn get_ticks_us() -> u64;
    pub fn get_ticks_ms() -> u64;
    pub fn wait_ticks(wait: ::core::ffi::c_ulong);
    pub fn wait_ms(wait_ms: ::core::ffi::c_ulong);
    pub fn die() -> !;
    pub fn data_cache_hit_invalidate(addr: *mut ::core::ffi::c_void, length: ::core::ffi::c_ulong);
    pub fn data_cache_hit_writeback(arg1: *const ::core::ffi::c_void, arg2: ::core::ffi::c_ulong);
    pub fn data_cache_hit_writeback_invalidate(
        arg1: *mut ::core::ffi::c_void,
        arg2: ::core::ffi::c_ulong,
    );
    pub fn data_cache_index_writeback_invalidate(
        arg1: *mut ::core::ffi::c_void,
        arg2: ::core::ffi::c_ulong,
    );
    pub fn data_cache_writeback_invalidate_all();
    pub fn inst_cache_hit_writeback(arg1: *const ::core::ffi::c_void, arg2: ::core::ffi::c_ulong);
    pub fn inst_cache_hit_invalidate(arg1: *mut ::core::ffi::c_void, arg2: ::core::ffi::c_ulong);
    pub fn inst_cache_index_invalidate(arg1: *mut ::core::ffi::c_void, arg2: ::core::ffi::c_ulong);
    pub fn inst_cache_invalidate_all();
    pub fn get_memory_size() -> ::core::ffi::c_int;
    pub fn is_memory_expanded() -> bool;
    pub fn assert_memory_expanded();
    pub fn sys_get_heap_stats(stats: *mut heap_stats_t);
    pub fn malloc_uncached(size: usize) -> *mut ::core::ffi::c_void;
    pub fn malloc_uncached_aligned(
        align: ::core::ffi::c_int,
        size: usize,
    ) -> *mut ::core::ffi::c_void;
    pub fn free_uncached(buf: *mut ::core::ffi::c_void);
    pub fn sys_reset_type() -> reset_type_t;
}
