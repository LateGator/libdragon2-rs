/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yuv_colorspace_t {
    pub c0: f32,
    pub c1: f32,
    pub c2: f32,
    pub c3: f32,
    pub c4: f32,
    pub y0: ::core::ffi::c_int,
    pub k0: ::core::ffi::c_int,
    pub k1: ::core::ffi::c_int,
    pub k2: ::core::ffi::c_int,
    pub k3: ::core::ffi::c_int,
    pub k4: ::core::ffi::c_int,
    pub k5: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of yuv_colorspace_t"][::core::mem::size_of::<yuv_colorspace_t>() - 48usize];
    ["Alignment of yuv_colorspace_t"][::core::mem::align_of::<yuv_colorspace_t>() - 4usize];
    ["Offset of field: yuv_colorspace_t::c0"]
        [::core::mem::offset_of!(yuv_colorspace_t, c0) - 0usize];
    ["Offset of field: yuv_colorspace_t::c1"]
        [::core::mem::offset_of!(yuv_colorspace_t, c1) - 4usize];
    ["Offset of field: yuv_colorspace_t::c2"]
        [::core::mem::offset_of!(yuv_colorspace_t, c2) - 8usize];
    ["Offset of field: yuv_colorspace_t::c3"]
        [::core::mem::offset_of!(yuv_colorspace_t, c3) - 12usize];
    ["Offset of field: yuv_colorspace_t::c4"]
        [::core::mem::offset_of!(yuv_colorspace_t, c4) - 16usize];
    ["Offset of field: yuv_colorspace_t::y0"]
        [::core::mem::offset_of!(yuv_colorspace_t, y0) - 20usize];
    ["Offset of field: yuv_colorspace_t::k0"]
        [::core::mem::offset_of!(yuv_colorspace_t, k0) - 24usize];
    ["Offset of field: yuv_colorspace_t::k1"]
        [::core::mem::offset_of!(yuv_colorspace_t, k1) - 28usize];
    ["Offset of field: yuv_colorspace_t::k2"]
        [::core::mem::offset_of!(yuv_colorspace_t, k2) - 32usize];
    ["Offset of field: yuv_colorspace_t::k3"]
        [::core::mem::offset_of!(yuv_colorspace_t, k3) - 36usize];
    ["Offset of field: yuv_colorspace_t::k4"]
        [::core::mem::offset_of!(yuv_colorspace_t, k4) - 40usize];
    ["Offset of field: yuv_colorspace_t::k5"]
        [::core::mem::offset_of!(yuv_colorspace_t, k5) - 44usize];
};
#[repr(C)]
pub struct yuv_frame_s {
    pub y: crate::surface::surface_t,
    pub u: crate::surface::surface_t,
    pub v: crate::surface::surface_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of yuv_frame_s"][::core::mem::size_of::<yuv_frame_s>() - 36usize];
    ["Alignment of yuv_frame_s"][::core::mem::align_of::<yuv_frame_s>() - 4usize];
    ["Offset of field: yuv_frame_s::y"][::core::mem::offset_of!(yuv_frame_s, y) - 0usize];
    ["Offset of field: yuv_frame_s::u"][::core::mem::offset_of!(yuv_frame_s, u) - 12usize];
    ["Offset of field: yuv_frame_s::v"][::core::mem::offset_of!(yuv_frame_s, v) - 24usize];
};
pub type yuv_frame_t = yuv_frame_s;
pub const yuv_zoom_t_YUV_ZOOM_KEEP_ASPECT: yuv_zoom_t = 0;
pub const yuv_zoom_t_YUV_ZOOM_FULL: yuv_zoom_t = 1;
pub const yuv_zoom_t_YUV_ZOOM_NONE: yuv_zoom_t = 2;
pub type yuv_zoom_t = ::core::ffi::c_uint;
pub const yuv_align_t_YUV_ALIGN_CENTER: yuv_align_t = 0;
pub const yuv_align_t_YUV_ALIGN_MIN: yuv_align_t = 1;
pub const yuv_align_t_YUV_ALIGN_MAX: yuv_align_t = 2;
pub type yuv_align_t = ::core::ffi::c_uint;
#[repr(C)]
pub struct yuv_fmv_parms_s {
    pub cs: *const yuv_colorspace_t,
    pub halign: yuv_align_t,
    pub valign: yuv_align_t,
    pub zoom: yuv_zoom_t,
    pub bkg_color: crate::graphics::color_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of yuv_fmv_parms_s"][::core::mem::size_of::<yuv_fmv_parms_s>() - 20usize];
    ["Alignment of yuv_fmv_parms_s"][::core::mem::align_of::<yuv_fmv_parms_s>() - 4usize];
    ["Offset of field: yuv_fmv_parms_s::cs"][::core::mem::offset_of!(yuv_fmv_parms_s, cs) - 0usize];
    ["Offset of field: yuv_fmv_parms_s::halign"]
        [::core::mem::offset_of!(yuv_fmv_parms_s, halign) - 4usize];
    ["Offset of field: yuv_fmv_parms_s::valign"]
        [::core::mem::offset_of!(yuv_fmv_parms_s, valign) - 8usize];
    ["Offset of field: yuv_fmv_parms_s::zoom"]
        [::core::mem::offset_of!(yuv_fmv_parms_s, zoom) - 12usize];
    ["Offset of field: yuv_fmv_parms_s::bkg_color"]
        [::core::mem::offset_of!(yuv_fmv_parms_s, bkg_color) - 16usize];
};
pub type yuv_fmv_parms_t = yuv_fmv_parms_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yuv_blitter_s {
    pub block: *mut crate::rspq::rspq_block_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of yuv_blitter_s"][::core::mem::size_of::<yuv_blitter_s>() - 4usize];
    ["Alignment of yuv_blitter_s"][::core::mem::align_of::<yuv_blitter_s>() - 4usize];
    ["Offset of field: yuv_blitter_s::block"]
        [::core::mem::offset_of!(yuv_blitter_s, block) - 0usize];
};
pub type yuv_blitter_t = yuv_blitter_s;
unsafe extern "C" {
    pub fn yuv_init();
    pub fn yuv_close();
    pub static YUV_BT601_TV: yuv_colorspace_t;
    pub static YUV_BT601_FULL: yuv_colorspace_t;
    pub static YUV_BT709_TV: yuv_colorspace_t;
    pub static YUV_BT709_FULL: yuv_colorspace_t;
    pub fn yuv_new_colorspace(
        Kr: f32,
        Kb: f32,
        y0: ::core::ffi::c_int,
        yrange: ::core::ffi::c_int,
        crange: ::core::ffi::c_int,
    ) -> yuv_colorspace_t;
    pub fn yuv_to_rgb(y: u8, u: u8, v: u8, cs: *const yuv_colorspace_t)
    -> crate::graphics::color_t;
    pub fn yuv_blitter_new(
        video_width: ::core::ffi::c_int,
        video_height: ::core::ffi::c_int,
        x0: f32,
        y0: f32,
        parms: *const crate::rdpq_tex::rdpq_blitparms_t,
        cs: *const yuv_colorspace_t,
    ) -> yuv_blitter_t;
    pub fn yuv_blitter_new_fmv(
        video_width: ::core::ffi::c_int,
        video_height: ::core::ffi::c_int,
        screen_width: ::core::ffi::c_int,
        screen_height: ::core::ffi::c_int,
        parms: *const yuv_fmv_parms_t,
    ) -> yuv_blitter_t;
    pub fn yuv_blitter_run(blitter: *mut yuv_blitter_t, frame: *mut yuv_frame_t);
    pub fn yuv_blitter_free(blitter: *mut yuv_blitter_t);
    pub fn yuv_tex_blit(
        frame: *mut yuv_frame_t,
        x0: f32,
        y0: f32,
        parms: *const crate::rdpq_tex::rdpq_blitparms_t,
        cs: *const yuv_colorspace_t,
    );
}
