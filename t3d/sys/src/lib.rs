#![no_std]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

/* automatically generated by rust-bindgen 0.72.0 */

pub const T3D_PI: f64 = 3.14159265358979;
pub type T3DVec3 = dragon::fgeom::fm_vec3_t;
pub type T3DVec4 = dragon::fgeom::fm_vec4_t;
pub type T3DQuat = dragon::fgeom::fm_quat_t;
pub type T3DMat4 = dragon::fgeom::fm_mat4_t;

pub const T3D_ALPHA_MODE_DEFAULT: u32 = 0;
pub const T3D_ALPHA_MODE_OPAQUE: u32 = 1;
pub const T3D_ALPHA_MODE_CUTOUT: u32 = 2;
pub const T3D_ALPHA_MODE_TRANSP: u32 = 3;
pub const T3D_FOG_MODE_DEFAULT: u32 = 0;
pub const T3D_FOG_MODE_DISABLED: u32 = 1;
pub const T3D_FOG_MODE_ACTIVE: u32 = 2;

pub const T3D_VERTEX_CACHE_SIZE: u32 = 70;
pub const T3DCmd_T3D_CMD_TRI_DRAW: T3DCmd = 0;
pub const T3DCmd_T3D_CMD_SCREEN_SIZE: T3DCmd = 1;
pub const T3DCmd_T3D_CMD_MATRIX_STACK: T3DCmd = 2;
pub const T3DCmd_T3D_CMD_SET_WORD: T3DCmd = 3;
pub const T3DCmd_T3D_CMD_VERT_LOAD: T3DCmd = 4;
pub const T3DCmd_T3D_CMD_LIGHT_SET: T3DCmd = 5;
pub const T3DCmd_T3D_CMD_DRAWFLAGS: T3DCmd = 6;
pub const T3DCmd_T3D_CMD_PROJ_SET: T3DCmd = 7;
pub const T3DCmd_T3D_CMD_FOG_RANGE: T3DCmd = 8;
pub const T3DCmd_T3D_CMD_FOG_STATE: T3DCmd = 9;
pub const T3DCmd_T3D_CMD_TRI_SYNC: T3DCmd = 10;
pub const T3DCmd_T3D_CMD_TRI_STRIP: T3DCmd = 11;
pub const T3DCmd_T3D_CMD_TRI_SEQ: T3DCmd = 12;
pub type T3DCmd = ::core::ffi::c_uint;

pub const TPXCmd_TPX_CMD_SYNC_T3D: TPXCmd = 0;
pub const TPXCmd_TPX_CMD_DRAW_COLOR: TPXCmd = 1;
pub const TPXCmd_TPX_CMD_MATRIX_STACK: TPXCmd = 2;
pub const TPXCmd_TPX_CMD_SET_DMEM: TPXCmd = 3;
pub const TPXCmd_TPX_CMD_DRAW_TEXTURE: TPXCmd = 4;
pub type TPXCmd = ::core::ffi::c_uint;

pub const T3DDrawFlags_T3D_FLAG_DEPTH: T3DDrawFlags = 1;
pub const T3DDrawFlags_T3D_FLAG_TEXTURED: T3DDrawFlags = 2;
pub const T3DDrawFlags_T3D_FLAG_SHADED: T3DDrawFlags = 4;
pub const T3DDrawFlags_T3D_FLAG_CULL_FRONT: T3DDrawFlags = 8;
pub const T3DDrawFlags_T3D_FLAG_CULL_BACK: T3DDrawFlags = 16;
pub const T3DDrawFlags_T3D_FLAG_NO_LIGHT: T3DDrawFlags = 65536;
pub type T3DDrawFlags = ::core::ffi::c_uint;
pub const T3DSegment_T3D_SEGMENT_1: T3DSegment = 1;
pub const T3DSegment_T3D_SEGMENT_2: T3DSegment = 2;
pub const T3DSegment_T3D_SEGMENT_3: T3DSegment = 3;
pub const T3DSegment_T3D_SEGMENT_4: T3DSegment = 4;
pub const T3DSegment_T3D_SEGMENT_5: T3DSegment = 5;
pub const T3DSegment_T3D_SEGMENT_6: T3DSegment = 6;
pub const T3DSegment_T3D_SEGMENT_SKELETON: T3DSegment = 7;
pub type T3DSegment = ::core::ffi::c_uint;
pub const T3DVertexFX_T3D_VERTEX_FX_NONE: T3DVertexFX = 0;
pub const T3DVertexFX_T3D_VERTEX_FX_SPHERICAL_UV: T3DVertexFX = 1;
pub const T3DVertexFX_T3D_VERTEX_FX_CELSHADE_COLOR: T3DVertexFX = 2;
pub const T3DVertexFX_T3D_VERTEX_FX_CELSHADE_ALPHA: T3DVertexFX = 3;
pub const T3DVertexFX_T3D_VERTEX_FX_OUTLINE: T3DVertexFX = 4;
pub type T3DVertexFX = ::core::ffi::c_uint;

pub const T3DModelChunkType_T3D_CHUNK_TYPE_VERTICES: T3DModelChunkType = 86;
pub const T3DModelChunkType_T3D_CHUNK_TYPE_INDICES: T3DModelChunkType = 73;
pub const T3DModelChunkType_T3D_CHUNK_TYPE_MATERIAL: T3DModelChunkType = 77;
pub const T3DModelChunkType_T3D_CHUNK_TYPE_OBJECT: T3DModelChunkType = 79;
pub const T3DModelChunkType_T3D_CHUNK_TYPE_SKELETON: T3DModelChunkType = 83;
pub const T3DModelChunkType_T3D_CHUNK_TYPE_ANIM: T3DModelChunkType = 65;
pub const T3DModelChunkType_T3D_CHUNK_TYPE_BVH: T3DModelChunkType = 66;
pub type T3DModelChunkType = ::core::ffi::c_uint;
pub type T3DModelTileCb = ::core::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::core::ffi::c_void,
        tileParams: *mut dragon::rdpq_tex::rdpq_texparms_t,
        tile: dragon::rdpq::rdpq_tile_t,
    ),
>;
pub type T3DModelFilterCb = ::core::option::Option<
    unsafe extern "C" fn(userData: *mut ::core::ffi::c_void, obj: *const T3DObject) -> bool,
>;
pub type T3DModelDynTextureCb = ::core::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::core::ffi::c_void,
        material: *const T3DMaterial,
        tileParams: *mut dragon::rdpq_tex::rdpq_texparms_t,
        tile: dragon::rdpq::rdpq_tile_t,
    ),
>;

pub const T3D_ANIM_TARGET_TRANSLATION: u32 = 0;
pub const T3D_ANIM_TARGET_SCALE_XYZ: u32 = 1;
pub const T3D_ANIM_TARGET_SCALE_S: u32 = 2;
pub const T3D_ANIM_TARGET_ROTATION: u32 = 3;

pub const T3D_DEBUG_CHAR_C_LEFT: &[u8; 2] = b"{\0";
pub const T3D_DEBUG_CHAR_C_RIGHT: &[u8; 2] = b"|\0";
pub const T3D_DEBUG_CHAR_C_UP: &[u8; 2] = b"}\0";
pub const T3D_DEBUG_CHAR_C_DOWN: &[u8; 2] = b"~\0";
pub const T3D_DEBUG_CHAR_A: &[u8; 2] = b"\x7F\0";
pub const T3D_DEBUG_CHAR_B: &[u8; 2] = b"\x80\0";

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DAnimTargetBase {
    pub timeStart: f32,
    pub timeEnd: f32,
    pub changedFlag: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DAnimTargetBase"][::core::mem::size_of::<T3DAnimTargetBase>() - 12usize];
    ["Alignment of T3DAnimTargetBase"][::core::mem::align_of::<T3DAnimTargetBase>() - 4usize];
    ["Offset of field: T3DAnimTargetBase::timeStart"]
        [::core::mem::offset_of!(T3DAnimTargetBase, timeStart) - 0usize];
    ["Offset of field: T3DAnimTargetBase::timeEnd"]
        [::core::mem::offset_of!(T3DAnimTargetBase, timeEnd) - 4usize];
    ["Offset of field: T3DAnimTargetBase::changedFlag"]
        [::core::mem::offset_of!(T3DAnimTargetBase, changedFlag) - 8usize];
};
#[repr(C)]
pub struct T3DAnimTargetQuat {
    pub base: T3DAnimTargetBase,
    pub targetQuat: *mut T3DQuat,
    pub kfCurr: T3DQuat,
    pub kfNext: T3DQuat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DAnimTargetQuat"][::core::mem::size_of::<T3DAnimTargetQuat>() - 48usize];
    ["Alignment of T3DAnimTargetQuat"][::core::mem::align_of::<T3DAnimTargetQuat>() - 4usize];
    ["Offset of field: T3DAnimTargetQuat::base"]
        [::core::mem::offset_of!(T3DAnimTargetQuat, base) - 0usize];
    ["Offset of field: T3DAnimTargetQuat::targetQuat"]
        [::core::mem::offset_of!(T3DAnimTargetQuat, targetQuat) - 12usize];
    ["Offset of field: T3DAnimTargetQuat::kfCurr"]
        [::core::mem::offset_of!(T3DAnimTargetQuat, kfCurr) - 16usize];
    ["Offset of field: T3DAnimTargetQuat::kfNext"]
        [::core::mem::offset_of!(T3DAnimTargetQuat, kfNext) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DAnimTargetScalar {
    pub base: T3DAnimTargetBase,
    pub targetScalar: *mut f32,
    pub kfCurr: f32,
    pub kfNext: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DAnimTargetScalar"][::core::mem::size_of::<T3DAnimTargetScalar>() - 24usize];
    ["Alignment of T3DAnimTargetScalar"][::core::mem::align_of::<T3DAnimTargetScalar>() - 4usize];
    ["Offset of field: T3DAnimTargetScalar::base"]
        [::core::mem::offset_of!(T3DAnimTargetScalar, base) - 0usize];
    ["Offset of field: T3DAnimTargetScalar::targetScalar"]
        [::core::mem::offset_of!(T3DAnimTargetScalar, targetScalar) - 12usize];
    ["Offset of field: T3DAnimTargetScalar::kfCurr"]
        [::core::mem::offset_of!(T3DAnimTargetScalar, kfCurr) - 16usize];
    ["Offset of field: T3DAnimTargetScalar::kfNext"]
        [::core::mem::offset_of!(T3DAnimTargetScalar, kfNext) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DAnim {
    pub animRef: *mut T3DChunkAnim,
    pub targetsQuat: *mut T3DAnimTargetQuat,
    pub targetsScalar: *mut T3DAnimTargetScalar,
    pub speed: f32,
    pub time: f32,
    pub file: *mut dragon::stdio::FILE,
    pub nextKfSize: ::core::ffi::c_int,
    pub isPlaying: u8,
    pub isLooping: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DAnim"][::core::mem::size_of::<T3DAnim>() - 32usize];
    ["Alignment of T3DAnim"][::core::mem::align_of::<T3DAnim>() - 4usize];
    ["Offset of field: T3DAnim::animRef"][::core::mem::offset_of!(T3DAnim, animRef) - 0usize];
    ["Offset of field: T3DAnim::targetsQuat"]
        [::core::mem::offset_of!(T3DAnim, targetsQuat) - 4usize];
    ["Offset of field: T3DAnim::targetsScalar"]
        [::core::mem::offset_of!(T3DAnim, targetsScalar) - 8usize];
    ["Offset of field: T3DAnim::speed"][::core::mem::offset_of!(T3DAnim, speed) - 12usize];
    ["Offset of field: T3DAnim::time"][::core::mem::offset_of!(T3DAnim, time) - 16usize];
    ["Offset of field: T3DAnim::file"][::core::mem::offset_of!(T3DAnim, file) - 20usize];
    ["Offset of field: T3DAnim::nextKfSize"]
        [::core::mem::offset_of!(T3DAnim, nextKfSize) - 24usize];
    ["Offset of field: T3DAnim::isPlaying"][::core::mem::offset_of!(T3DAnim, isPlaying) - 28usize];
    ["Offset of field: T3DAnim::isLooping"][::core::mem::offset_of!(T3DAnim, isLooping) - 29usize];
};
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone, Default, PartialEq, PartialOrd, Eq, Ord, Hash)]
pub struct T3DVertPacked {
    pub posA: [i16; 3usize],
    pub normA: u16,
    pub posB: [i16; 3usize],
    pub normB: u16,
    pub rgbaA: u32,
    pub rgbaB: u32,
    pub stA: [i16; 2usize],
    pub stB: [i16; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DVertPacked"][::core::mem::size_of::<T3DVertPacked>() - 32usize];
    ["Alignment of T3DVertPacked"][::core::mem::align_of::<T3DVertPacked>() - 8usize];
    ["Offset of field: T3DVertPacked::posA"][::core::mem::offset_of!(T3DVertPacked, posA) - 0usize];
    ["Offset of field: T3DVertPacked::normA"]
        [::core::mem::offset_of!(T3DVertPacked, normA) - 6usize];
    ["Offset of field: T3DVertPacked::posB"][::core::mem::offset_of!(T3DVertPacked, posB) - 8usize];
    ["Offset of field: T3DVertPacked::normB"]
        [::core::mem::offset_of!(T3DVertPacked, normB) - 14usize];
    ["Offset of field: T3DVertPacked::rgbaA"]
        [::core::mem::offset_of!(T3DVertPacked, rgbaA) - 16usize];
    ["Offset of field: T3DVertPacked::rgbaB"]
        [::core::mem::offset_of!(T3DVertPacked, rgbaB) - 20usize];
    ["Offset of field: T3DVertPacked::stA"][::core::mem::offset_of!(T3DVertPacked, stA) - 24usize];
    ["Offset of field: T3DVertPacked::stB"][::core::mem::offset_of!(T3DVertPacked, stB) - 28usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct T3DViewport {
    pub _matCameraFP: T3DMat4FP,
    pub _matProjFP: T3DMat4FP,
    pub matCamera: T3DMat4,
    pub matProj: T3DMat4,
    pub matCamProj: T3DMat4,
    pub viewFrustum: T3DFrustum,
    pub _isCamProjDirty: bool,
    pub offset: [i32; 2usize],
    pub size: [i32; 2usize],
    pub guardBandScale: ::core::ffi::c_int,
    pub useRejection: ::core::ffi::c_int,
    pub _normScaleW: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DViewport"][::core::mem::size_of::<T3DViewport>() - 448usize];
    ["Alignment of T3DViewport"][::core::mem::align_of::<T3DViewport>() - 16usize];
    ["Offset of field: T3DViewport::_matCameraFP"]
        [::core::mem::offset_of!(T3DViewport, _matCameraFP) - 0usize];
    ["Offset of field: T3DViewport::_matProjFP"]
        [::core::mem::offset_of!(T3DViewport, _matProjFP) - 64usize];
    ["Offset of field: T3DViewport::matCamera"]
        [::core::mem::offset_of!(T3DViewport, matCamera) - 128usize];
    ["Offset of field: T3DViewport::matProj"]
        [::core::mem::offset_of!(T3DViewport, matProj) - 192usize];
    ["Offset of field: T3DViewport::matCamProj"]
        [::core::mem::offset_of!(T3DViewport, matCamProj) - 256usize];
    ["Offset of field: T3DViewport::viewFrustum"]
        [::core::mem::offset_of!(T3DViewport, viewFrustum) - 320usize];
    ["Offset of field: T3DViewport::_isCamProjDirty"]
        [::core::mem::offset_of!(T3DViewport, _isCamProjDirty) - 416usize];
    ["Offset of field: T3DViewport::offset"]
        [::core::mem::offset_of!(T3DViewport, offset) - 420usize];
    ["Offset of field: T3DViewport::size"][::core::mem::offset_of!(T3DViewport, size) - 428usize];
    ["Offset of field: T3DViewport::guardBandScale"]
        [::core::mem::offset_of!(T3DViewport, guardBandScale) - 436usize];
    ["Offset of field: T3DViewport::useRejection"]
        [::core::mem::offset_of!(T3DViewport, useRejection) - 440usize];
    ["Offset of field: T3DViewport::_normScaleW"]
        [::core::mem::offset_of!(T3DViewport, _normScaleW) - 444usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DInitParams {
    pub matrixStackSize: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DInitParams"][::core::mem::size_of::<T3DInitParams>() - 4usize];
    ["Alignment of T3DInitParams"][::core::mem::align_of::<T3DInitParams>() - 4usize];
    ["Offset of field: T3DInitParams::matrixStackSize"]
        [::core::mem::offset_of!(T3DInitParams, matrixStackSize) - 0usize];
};

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct T3DVec4FP {
    pub i: [i16; 4usize],
    pub f: [u16; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DVec4FP"][::core::mem::size_of::<T3DVec4FP>() - 16usize];
    ["Alignment of T3DVec4FP"][::core::mem::align_of::<T3DVec4FP>() - 2usize];
    ["Offset of field: T3DVec4FP::i"][::core::mem::offset_of!(T3DVec4FP, i) - 0usize];
    ["Offset of field: T3DVec4FP::f"][::core::mem::offset_of!(T3DVec4FP, f) - 8usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct T3DMat4FP {
    pub m: [T3DVec4FP; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DMat4FP"][::core::mem::size_of::<T3DMat4FP>() - 64usize];
    ["Alignment of T3DMat4FP"][::core::mem::align_of::<T3DMat4FP>() - 16usize];
    ["Offset of field: T3DMat4FP::m"][::core::mem::offset_of!(T3DMat4FP, m) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct T3DFrustum {
    pub planes: [T3DVec4; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DFrustum"][::core::mem::size_of::<T3DFrustum>() - 96usize];
    ["Alignment of T3DFrustum"][::core::mem::align_of::<T3DFrustum>() - 4usize];
    ["Offset of field: T3DFrustum::planes"][::core::mem::offset_of!(T3DFrustum, planes) - 0usize];
};

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub const fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub const fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub const unsafe fn as_slice(&self, len: usize) -> &[T] {
        unsafe { ::core::slice::from_raw_parts(self.as_ptr(), len) }
    }
    #[inline]
    pub const unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        unsafe { ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len) }
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DMaterialAxis {
    pub low: f32,
    pub height: f32,
    pub mask: i8,
    pub shift: i8,
    pub mirror: u8,
    pub clamp: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DMaterialAxis"][::core::mem::size_of::<T3DMaterialAxis>() - 12usize];
    ["Alignment of T3DMaterialAxis"][::core::mem::align_of::<T3DMaterialAxis>() - 4usize];
    ["Offset of field: T3DMaterialAxis::low"]
        [::core::mem::offset_of!(T3DMaterialAxis, low) - 0usize];
    ["Offset of field: T3DMaterialAxis::height"]
        [::core::mem::offset_of!(T3DMaterialAxis, height) - 4usize];
    ["Offset of field: T3DMaterialAxis::mask"]
        [::core::mem::offset_of!(T3DMaterialAxis, mask) - 8usize];
    ["Offset of field: T3DMaterialAxis::shift"]
        [::core::mem::offset_of!(T3DMaterialAxis, shift) - 9usize];
    ["Offset of field: T3DMaterialAxis::mirror"]
        [::core::mem::offset_of!(T3DMaterialAxis, mirror) - 10usize];
    ["Offset of field: T3DMaterialAxis::clamp"]
        [::core::mem::offset_of!(T3DMaterialAxis, clamp) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DMaterialTexture {
    pub texReference: u32,
    pub texPath: *mut ::core::ffi::c_char,
    pub textureHash: u32,
    pub texture: *mut dragon::sprite::sprite_t,
    pub texWidth: u16,
    pub texHeight: u16,
    pub s: T3DMaterialAxis,
    pub t: T3DMaterialAxis,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DMaterialTexture"][::core::mem::size_of::<T3DMaterialTexture>() - 44usize];
    ["Alignment of T3DMaterialTexture"][::core::mem::align_of::<T3DMaterialTexture>() - 4usize];
    ["Offset of field: T3DMaterialTexture::texReference"]
        [::core::mem::offset_of!(T3DMaterialTexture, texReference) - 0usize];
    ["Offset of field: T3DMaterialTexture::texPath"]
        [::core::mem::offset_of!(T3DMaterialTexture, texPath) - 4usize];
    ["Offset of field: T3DMaterialTexture::textureHash"]
        [::core::mem::offset_of!(T3DMaterialTexture, textureHash) - 8usize];
    ["Offset of field: T3DMaterialTexture::texture"]
        [::core::mem::offset_of!(T3DMaterialTexture, texture) - 12usize];
    ["Offset of field: T3DMaterialTexture::texWidth"]
        [::core::mem::offset_of!(T3DMaterialTexture, texWidth) - 16usize];
    ["Offset of field: T3DMaterialTexture::texHeight"]
        [::core::mem::offset_of!(T3DMaterialTexture, texHeight) - 18usize];
    ["Offset of field: T3DMaterialTexture::s"]
        [::core::mem::offset_of!(T3DMaterialTexture, s) - 20usize];
    ["Offset of field: T3DMaterialTexture::t"]
        [::core::mem::offset_of!(T3DMaterialTexture, t) - 32usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct T3DMaterial {
    pub colorCombiner: u64,
    pub otherModeValue: u64,
    pub otherModeMask: u64,
    pub blendMode: u32,
    pub renderFlags: u32,
    pub _unused00_: u8,
    pub fogMode: u8,
    pub setColorFlags: u8,
    pub vertexFxFunc: u8,
    pub primColor: dragon::graphics::color_t,
    pub envColor: dragon::graphics::color_t,
    pub blendColor: dragon::graphics::color_t,
    pub name: *mut ::core::ffi::c_char,
    pub textureA: T3DMaterialTexture,
    pub textureB: T3DMaterialTexture,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DMaterial"][::core::mem::size_of::<T3DMaterial>() - 144usize];
    ["Alignment of T3DMaterial"][::core::mem::align_of::<T3DMaterial>() - 8usize];
    ["Offset of field: T3DMaterial::colorCombiner"]
        [::core::mem::offset_of!(T3DMaterial, colorCombiner) - 0usize];
    ["Offset of field: T3DMaterial::otherModeValue"]
        [::core::mem::offset_of!(T3DMaterial, otherModeValue) - 8usize];
    ["Offset of field: T3DMaterial::otherModeMask"]
        [::core::mem::offset_of!(T3DMaterial, otherModeMask) - 16usize];
    ["Offset of field: T3DMaterial::blendMode"]
        [::core::mem::offset_of!(T3DMaterial, blendMode) - 24usize];
    ["Offset of field: T3DMaterial::renderFlags"]
        [::core::mem::offset_of!(T3DMaterial, renderFlags) - 28usize];
    ["Offset of field: T3DMaterial::_unused00_"]
        [::core::mem::offset_of!(T3DMaterial, _unused00_) - 32usize];
    ["Offset of field: T3DMaterial::fogMode"]
        [::core::mem::offset_of!(T3DMaterial, fogMode) - 33usize];
    ["Offset of field: T3DMaterial::setColorFlags"]
        [::core::mem::offset_of!(T3DMaterial, setColorFlags) - 34usize];
    ["Offset of field: T3DMaterial::vertexFxFunc"]
        [::core::mem::offset_of!(T3DMaterial, vertexFxFunc) - 35usize];
    ["Offset of field: T3DMaterial::primColor"]
        [::core::mem::offset_of!(T3DMaterial, primColor) - 36usize];
    ["Offset of field: T3DMaterial::envColor"]
        [::core::mem::offset_of!(T3DMaterial, envColor) - 40usize];
    ["Offset of field: T3DMaterial::blendColor"]
        [::core::mem::offset_of!(T3DMaterial, blendColor) - 44usize];
    ["Offset of field: T3DMaterial::name"][::core::mem::offset_of!(T3DMaterial, name) - 48usize];
    ["Offset of field: T3DMaterial::textureA"]
        [::core::mem::offset_of!(T3DMaterial, textureA) - 52usize];
    ["Offset of field: T3DMaterial::textureB"]
        [::core::mem::offset_of!(T3DMaterial, textureB) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DObjectPart {
    pub vert: *mut T3DVertPacked,
    pub vertLoadCount: u16,
    pub vertDestOffset: u16,
    pub indices: *mut u8,
    pub numIndices: u16,
    pub matrixIdx: u16,
    pub numStripIndices: [u8; 4usize],
    pub idxSeqBase: u8,
    pub idxSeqCount: u8,
    pub _padding: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DObjectPart"][::core::mem::size_of::<T3DObjectPart>() - 24usize];
    ["Alignment of T3DObjectPart"][::core::mem::align_of::<T3DObjectPart>() - 4usize];
    ["Offset of field: T3DObjectPart::vert"][::core::mem::offset_of!(T3DObjectPart, vert) - 0usize];
    ["Offset of field: T3DObjectPart::vertLoadCount"]
        [::core::mem::offset_of!(T3DObjectPart, vertLoadCount) - 4usize];
    ["Offset of field: T3DObjectPart::vertDestOffset"]
        [::core::mem::offset_of!(T3DObjectPart, vertDestOffset) - 6usize];
    ["Offset of field: T3DObjectPart::indices"]
        [::core::mem::offset_of!(T3DObjectPart, indices) - 8usize];
    ["Offset of field: T3DObjectPart::numIndices"]
        [::core::mem::offset_of!(T3DObjectPart, numIndices) - 12usize];
    ["Offset of field: T3DObjectPart::matrixIdx"]
        [::core::mem::offset_of!(T3DObjectPart, matrixIdx) - 14usize];
    ["Offset of field: T3DObjectPart::numStripIndices"]
        [::core::mem::offset_of!(T3DObjectPart, numStripIndices) - 16usize];
    ["Offset of field: T3DObjectPart::idxSeqBase"]
        [::core::mem::offset_of!(T3DObjectPart, idxSeqBase) - 20usize];
    ["Offset of field: T3DObjectPart::idxSeqCount"]
        [::core::mem::offset_of!(T3DObjectPart, idxSeqCount) - 21usize];
    ["Offset of field: T3DObjectPart::_padding"]
        [::core::mem::offset_of!(T3DObjectPart, _padding) - 22usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct T3DObject {
    pub name: *mut ::core::ffi::c_char,
    pub numParts: u16,
    pub triCount: u16,
    pub material: *mut T3DMaterial,
    pub userBlock: *mut dragon::rspq::rspq_block_t,
    pub isVisible: u8,
    pub _padding: u8,
    pub userValue0: u8,
    pub userValue1: u8,
    pub aabbMin: [i16; 3usize],
    pub aabbMax: [i16; 3usize],
    pub parts: __IncompleteArrayField<T3DObjectPart>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DObject"][::core::mem::size_of::<T3DObject>() - 32usize];
    ["Alignment of T3DObject"][::core::mem::align_of::<T3DObject>() - 4usize];
    ["Offset of field: T3DObject::name"][::core::mem::offset_of!(T3DObject, name) - 0usize];
    ["Offset of field: T3DObject::numParts"][::core::mem::offset_of!(T3DObject, numParts) - 4usize];
    ["Offset of field: T3DObject::triCount"][::core::mem::offset_of!(T3DObject, triCount) - 6usize];
    ["Offset of field: T3DObject::material"][::core::mem::offset_of!(T3DObject, material) - 8usize];
    ["Offset of field: T3DObject::userBlock"]
        [::core::mem::offset_of!(T3DObject, userBlock) - 12usize];
    ["Offset of field: T3DObject::isVisible"]
        [::core::mem::offset_of!(T3DObject, isVisible) - 16usize];
    ["Offset of field: T3DObject::_padding"]
        [::core::mem::offset_of!(T3DObject, _padding) - 17usize];
    ["Offset of field: T3DObject::userValue0"]
        [::core::mem::offset_of!(T3DObject, userValue0) - 18usize];
    ["Offset of field: T3DObject::userValue1"]
        [::core::mem::offset_of!(T3DObject, userValue1) - 19usize];
    ["Offset of field: T3DObject::aabbMin"][::core::mem::offset_of!(T3DObject, aabbMin) - 20usize];
    ["Offset of field: T3DObject::aabbMax"][::core::mem::offset_of!(T3DObject, aabbMax) - 26usize];
    ["Offset of field: T3DObject::parts"][::core::mem::offset_of!(T3DObject, parts) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DBvhNode {
    pub aabbMin: [i16; 3usize],
    pub aabbMax: [i16; 3usize],
    pub value: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DBvhNode"][::core::mem::size_of::<T3DBvhNode>() - 14usize];
    ["Alignment of T3DBvhNode"][::core::mem::align_of::<T3DBvhNode>() - 2usize];
    ["Offset of field: T3DBvhNode::aabbMin"][::core::mem::offset_of!(T3DBvhNode, aabbMin) - 0usize];
    ["Offset of field: T3DBvhNode::aabbMax"][::core::mem::offset_of!(T3DBvhNode, aabbMax) - 6usize];
    ["Offset of field: T3DBvhNode::value"][::core::mem::offset_of!(T3DBvhNode, value) - 12usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct T3DBvh {
    pub nodeCount: u16,
    pub dataCount: u16,
    pub nodes: __IncompleteArrayField<T3DBvhNode>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DBvh"][::core::mem::size_of::<T3DBvh>() - 4usize];
    ["Alignment of T3DBvh"][::core::mem::align_of::<T3DBvh>() - 2usize];
    ["Offset of field: T3DBvh::nodeCount"][::core::mem::offset_of!(T3DBvh, nodeCount) - 0usize];
    ["Offset of field: T3DBvh::dataCount"][::core::mem::offset_of!(T3DBvh, dataCount) - 2usize];
    ["Offset of field: T3DBvh::nodes"][::core::mem::offset_of!(T3DBvh, nodes) - 4usize];
};
#[repr(C)]
pub struct T3DChunkBone {
    pub name: *mut ::core::ffi::c_char,
    pub parentIdx: u16,
    pub depth: u16,
    pub scale: T3DVec3,
    pub rotation: T3DQuat,
    pub position: T3DVec3,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DChunkBone"][::core::mem::size_of::<T3DChunkBone>() - 48usize];
    ["Alignment of T3DChunkBone"][::core::mem::align_of::<T3DChunkBone>() - 4usize];
    ["Offset of field: T3DChunkBone::name"][::core::mem::offset_of!(T3DChunkBone, name) - 0usize];
    ["Offset of field: T3DChunkBone::parentIdx"]
        [::core::mem::offset_of!(T3DChunkBone, parentIdx) - 4usize];
    ["Offset of field: T3DChunkBone::depth"][::core::mem::offset_of!(T3DChunkBone, depth) - 6usize];
    ["Offset of field: T3DChunkBone::scale"][::core::mem::offset_of!(T3DChunkBone, scale) - 8usize];
    ["Offset of field: T3DChunkBone::rotation"]
        [::core::mem::offset_of!(T3DChunkBone, rotation) - 20usize];
    ["Offset of field: T3DChunkBone::position"]
        [::core::mem::offset_of!(T3DChunkBone, position) - 36usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct T3DChunkSkeleton {
    pub boneCount: u16,
    pub _reserved: u16,
    pub bones: __IncompleteArrayField<T3DChunkBone>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DChunkSkeleton"][::core::mem::size_of::<T3DChunkSkeleton>() - 4usize];
    ["Alignment of T3DChunkSkeleton"][::core::mem::align_of::<T3DChunkSkeleton>() - 4usize];
    ["Offset of field: T3DChunkSkeleton::boneCount"]
        [::core::mem::offset_of!(T3DChunkSkeleton, boneCount) - 0usize];
    ["Offset of field: T3DChunkSkeleton::_reserved"]
        [::core::mem::offset_of!(T3DChunkSkeleton, _reserved) - 2usize];
    ["Offset of field: T3DChunkSkeleton::bones"]
        [::core::mem::offset_of!(T3DChunkSkeleton, bones) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DAnimChannelMapping {
    pub targetIdx: u16,
    pub targetType: u8,
    pub attributeIdx: u8,
    pub quantScale: f32,
    pub quantOffset: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DAnimChannelMapping"][::core::mem::size_of::<T3DAnimChannelMapping>() - 12usize];
    ["Alignment of T3DAnimChannelMapping"]
        [::core::mem::align_of::<T3DAnimChannelMapping>() - 4usize];
    ["Offset of field: T3DAnimChannelMapping::targetIdx"]
        [::core::mem::offset_of!(T3DAnimChannelMapping, targetIdx) - 0usize];
    ["Offset of field: T3DAnimChannelMapping::targetType"]
        [::core::mem::offset_of!(T3DAnimChannelMapping, targetType) - 2usize];
    ["Offset of field: T3DAnimChannelMapping::attributeIdx"]
        [::core::mem::offset_of!(T3DAnimChannelMapping, attributeIdx) - 3usize];
    ["Offset of field: T3DAnimChannelMapping::quantScale"]
        [::core::mem::offset_of!(T3DAnimChannelMapping, quantScale) - 4usize];
    ["Offset of field: T3DAnimChannelMapping::quantOffset"]
        [::core::mem::offset_of!(T3DAnimChannelMapping, quantOffset) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct T3DChunkAnim {
    pub name: *mut ::core::ffi::c_char,
    pub duration: f32,
    pub keyframeCount: u32,
    pub channelsQuat: u16,
    pub channelsScalar: u16,
    pub filePath: *mut ::core::ffi::c_char,
    pub channelMappings: __IncompleteArrayField<T3DAnimChannelMapping>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DChunkAnim"][::core::mem::size_of::<T3DChunkAnim>() - 20usize];
    ["Alignment of T3DChunkAnim"][::core::mem::align_of::<T3DChunkAnim>() - 4usize];
    ["Offset of field: T3DChunkAnim::name"][::core::mem::offset_of!(T3DChunkAnim, name) - 0usize];
    ["Offset of field: T3DChunkAnim::duration"]
        [::core::mem::offset_of!(T3DChunkAnim, duration) - 4usize];
    ["Offset of field: T3DChunkAnim::keyframeCount"]
        [::core::mem::offset_of!(T3DChunkAnim, keyframeCount) - 8usize];
    ["Offset of field: T3DChunkAnim::channelsQuat"]
        [::core::mem::offset_of!(T3DChunkAnim, channelsQuat) - 12usize];
    ["Offset of field: T3DChunkAnim::channelsScalar"]
        [::core::mem::offset_of!(T3DChunkAnim, channelsScalar) - 14usize];
    ["Offset of field: T3DChunkAnim::filePath"]
        [::core::mem::offset_of!(T3DChunkAnim, filePath) - 16usize];
    ["Offset of field: T3DChunkAnim::channelMappings"]
        [::core::mem::offset_of!(T3DChunkAnim, channelMappings) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union T3DChunkOffset {
    pub type_: ::core::ffi::c_char,
    pub offset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DChunkOffset"][::core::mem::size_of::<T3DChunkOffset>() - 4usize];
    ["Alignment of T3DChunkOffset"][::core::mem::align_of::<T3DChunkOffset>() - 4usize];
    ["Offset of field: T3DChunkOffset::type_"]
        [::core::mem::offset_of!(T3DChunkOffset, type_) - 0usize];
    ["Offset of field: T3DChunkOffset::offset"]
        [::core::mem::offset_of!(T3DChunkOffset, offset) - 0usize];
};
#[repr(C)]
pub struct T3DModel {
    pub magic: [::core::ffi::c_char; 4usize],
    pub chunkCount: u32,
    pub totalVertCount: u16,
    pub totalIndexCount: u16,
    pub chunkIdxVertices: u32,
    pub chunkIdxIndices: u32,
    pub chunkIdxMaterials: u32,
    pub stringTablePtr: *mut ::core::ffi::c_char,
    pub userBlock: *mut dragon::rspq::rspq_block_t,
    pub aabbMin: [i16; 3usize],
    pub aabbMax: [i16; 3usize],
    pub chunkOffsets: __IncompleteArrayField<T3DChunkOffset>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DModel"][::core::mem::size_of::<T3DModel>() - 44usize];
    ["Alignment of T3DModel"][::core::mem::align_of::<T3DModel>() - 4usize];
    ["Offset of field: T3DModel::magic"][::core::mem::offset_of!(T3DModel, magic) - 0usize];
    ["Offset of field: T3DModel::chunkCount"]
        [::core::mem::offset_of!(T3DModel, chunkCount) - 4usize];
    ["Offset of field: T3DModel::totalVertCount"]
        [::core::mem::offset_of!(T3DModel, totalVertCount) - 8usize];
    ["Offset of field: T3DModel::totalIndexCount"]
        [::core::mem::offset_of!(T3DModel, totalIndexCount) - 10usize];
    ["Offset of field: T3DModel::chunkIdxVertices"]
        [::core::mem::offset_of!(T3DModel, chunkIdxVertices) - 12usize];
    ["Offset of field: T3DModel::chunkIdxIndices"]
        [::core::mem::offset_of!(T3DModel, chunkIdxIndices) - 16usize];
    ["Offset of field: T3DModel::chunkIdxMaterials"]
        [::core::mem::offset_of!(T3DModel, chunkIdxMaterials) - 20usize];
    ["Offset of field: T3DModel::stringTablePtr"]
        [::core::mem::offset_of!(T3DModel, stringTablePtr) - 24usize];
    ["Offset of field: T3DModel::userBlock"]
        [::core::mem::offset_of!(T3DModel, userBlock) - 28usize];
    ["Offset of field: T3DModel::aabbMin"][::core::mem::offset_of!(T3DModel, aabbMin) - 32usize];
    ["Offset of field: T3DModel::aabbMax"][::core::mem::offset_of!(T3DModel, aabbMax) - 38usize];
    ["Offset of field: T3DModel::chunkOffsets"]
        [::core::mem::offset_of!(T3DModel, chunkOffsets) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct T3DModelIter {
    pub __bindgen_anon_1: T3DModelIter__bindgen_ty_1,
    pub _model: *const T3DModel,
    pub _idx: u16,
    pub _chunkType: ::core::ffi::c_char,
}
impl core::fmt::Debug for T3DModelIter {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("T3DModelIter")
            .field("chunk", unsafe { &self.__bindgen_anon_1.chunk })
            .field("_model", &self._model)
            .field("_idx", &self._idx)
            .field("_chunkType", &self._chunkType)
            .finish()
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union T3DModelIter__bindgen_ty_1 {
    pub chunk: *mut ::core::ffi::c_void,
    pub object: *mut T3DObject,
    pub material: *mut T3DMaterial,
    pub skeleton: *mut T3DChunkSkeleton,
    pub anim: *mut T3DChunkAnim,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DModelIter__bindgen_ty_1"]
        [::core::mem::size_of::<T3DModelIter__bindgen_ty_1>() - 4usize];
    ["Alignment of T3DModelIter__bindgen_ty_1"]
        [::core::mem::align_of::<T3DModelIter__bindgen_ty_1>() - 4usize];
    ["Offset of field: T3DModelIter__bindgen_ty_1::chunk"]
        [::core::mem::offset_of!(T3DModelIter__bindgen_ty_1, chunk) - 0usize];
    ["Offset of field: T3DModelIter__bindgen_ty_1::object"]
        [::core::mem::offset_of!(T3DModelIter__bindgen_ty_1, object) - 0usize];
    ["Offset of field: T3DModelIter__bindgen_ty_1::material"]
        [::core::mem::offset_of!(T3DModelIter__bindgen_ty_1, material) - 0usize];
    ["Offset of field: T3DModelIter__bindgen_ty_1::skeleton"]
        [::core::mem::offset_of!(T3DModelIter__bindgen_ty_1, skeleton) - 0usize];
    ["Offset of field: T3DModelIter__bindgen_ty_1::anim"]
        [::core::mem::offset_of!(T3DModelIter__bindgen_ty_1, anim) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DModelIter"][::core::mem::size_of::<T3DModelIter>() - 12usize];
    ["Alignment of T3DModelIter"][::core::mem::align_of::<T3DModelIter>() - 4usize];
    ["Offset of field: T3DModelIter::_model"]
        [::core::mem::offset_of!(T3DModelIter, _model) - 4usize];
    ["Offset of field: T3DModelIter::_idx"][::core::mem::offset_of!(T3DModelIter, _idx) - 8usize];
    ["Offset of field: T3DModelIter::_chunkType"]
        [::core::mem::offset_of!(T3DModelIter, _chunkType) - 10usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct T3DModelDrawConf {
    pub userData: *mut ::core::ffi::c_void,
    pub tileCb: T3DModelTileCb,
    pub filterCb: T3DModelFilterCb,
    pub dynTextureCb: T3DModelDynTextureCb,
    pub matrices: *const T3DMat4FP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DModelDrawConf"][::core::mem::size_of::<T3DModelDrawConf>() - 20usize];
    ["Alignment of T3DModelDrawConf"][::core::mem::align_of::<T3DModelDrawConf>() - 4usize];
    ["Offset of field: T3DModelDrawConf::userData"]
        [::core::mem::offset_of!(T3DModelDrawConf, userData) - 0usize];
    ["Offset of field: T3DModelDrawConf::tileCb"]
        [::core::mem::offset_of!(T3DModelDrawConf, tileCb) - 4usize];
    ["Offset of field: T3DModelDrawConf::filterCb"]
        [::core::mem::offset_of!(T3DModelDrawConf, filterCb) - 8usize];
    ["Offset of field: T3DModelDrawConf::dynTextureCb"]
        [::core::mem::offset_of!(T3DModelDrawConf, dynTextureCb) - 12usize];
    ["Offset of field: T3DModelDrawConf::matrices"]
        [::core::mem::offset_of!(T3DModelDrawConf, matrices) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct T3DModelState {
    pub lastTextureHashA: u32,
    pub lastTextureHashB: u32,
    pub lastFogMode: u8,
    pub lastRenderFlags: u32,
    pub lastCC: u64,
    pub lastPrimColor: dragon::graphics::color_t,
    pub lastEnvColor: dragon::graphics::color_t,
    pub lastBlendColor: dragon::graphics::color_t,
    pub lastVertFXFunc: u8,
    pub lastUvGenParams: [u16; 2usize],
    pub lastOtherMode: u64,
    pub lastBlendMode: u32,
    pub drawConf: *mut T3DModelDrawConf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DModelState"][::core::mem::size_of::<T3DModelState>() - 64usize];
    ["Alignment of T3DModelState"][::core::mem::align_of::<T3DModelState>() - 8usize];
    ["Offset of field: T3DModelState::lastTextureHashA"]
        [::core::mem::offset_of!(T3DModelState, lastTextureHashA) - 0usize];
    ["Offset of field: T3DModelState::lastTextureHashB"]
        [::core::mem::offset_of!(T3DModelState, lastTextureHashB) - 4usize];
    ["Offset of field: T3DModelState::lastFogMode"]
        [::core::mem::offset_of!(T3DModelState, lastFogMode) - 8usize];
    ["Offset of field: T3DModelState::lastRenderFlags"]
        [::core::mem::offset_of!(T3DModelState, lastRenderFlags) - 12usize];
    ["Offset of field: T3DModelState::lastCC"]
        [::core::mem::offset_of!(T3DModelState, lastCC) - 16usize];
    ["Offset of field: T3DModelState::lastPrimColor"]
        [::core::mem::offset_of!(T3DModelState, lastPrimColor) - 24usize];
    ["Offset of field: T3DModelState::lastEnvColor"]
        [::core::mem::offset_of!(T3DModelState, lastEnvColor) - 28usize];
    ["Offset of field: T3DModelState::lastBlendColor"]
        [::core::mem::offset_of!(T3DModelState, lastBlendColor) - 32usize];
    ["Offset of field: T3DModelState::lastVertFXFunc"]
        [::core::mem::offset_of!(T3DModelState, lastVertFXFunc) - 36usize];
    ["Offset of field: T3DModelState::lastUvGenParams"]
        [::core::mem::offset_of!(T3DModelState, lastUvGenParams) - 38usize];
    ["Offset of field: T3DModelState::lastOtherMode"]
        [::core::mem::offset_of!(T3DModelState, lastOtherMode) - 48usize];
    ["Offset of field: T3DModelState::lastBlendMode"]
        [::core::mem::offset_of!(T3DModelState, lastBlendMode) - 56usize];
    ["Offset of field: T3DModelState::drawConf"]
        [::core::mem::offset_of!(T3DModelState, drawConf) - 60usize];
};

#[repr(C)]
pub struct T3DBone {
    pub matrix: T3DMat4,
    pub scale: T3DVec3,
    pub rotation: T3DQuat,
    pub position: T3DVec3,
    pub hasChanged: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DBone"][::core::mem::size_of::<T3DBone>() - 108usize];
    ["Alignment of T3DBone"][::core::mem::align_of::<T3DBone>() - 4usize];
    ["Offset of field: T3DBone::matrix"][::core::mem::offset_of!(T3DBone, matrix) - 0usize];
    ["Offset of field: T3DBone::scale"][::core::mem::offset_of!(T3DBone, scale) - 64usize];
    ["Offset of field: T3DBone::rotation"][::core::mem::offset_of!(T3DBone, rotation) - 76usize];
    ["Offset of field: T3DBone::position"][::core::mem::offset_of!(T3DBone, position) - 92usize];
    ["Offset of field: T3DBone::hasChanged"]
        [::core::mem::offset_of!(T3DBone, hasChanged) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T3DSkeleton {
    pub bones: *mut T3DBone,
    pub boneMatricesFP: *mut T3DMat4FP,
    pub bufferCount: u8,
    pub currentBufferIdx: u8,
    pub skeletonRef: *const T3DChunkSkeleton,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of T3DSkeleton"][::core::mem::size_of::<T3DSkeleton>() - 16usize];
    ["Alignment of T3DSkeleton"][::core::mem::align_of::<T3DSkeleton>() - 4usize];
    ["Offset of field: T3DSkeleton::bones"][::core::mem::offset_of!(T3DSkeleton, bones) - 0usize];
    ["Offset of field: T3DSkeleton::boneMatricesFP"]
        [::core::mem::offset_of!(T3DSkeleton, boneMatricesFP) - 4usize];
    ["Offset of field: T3DSkeleton::bufferCount"]
        [::core::mem::offset_of!(T3DSkeleton, bufferCount) - 8usize];
    ["Offset of field: T3DSkeleton::currentBufferIdx"]
        [::core::mem::offset_of!(T3DSkeleton, currentBufferIdx) - 9usize];
    ["Offset of field: T3DSkeleton::skeletonRef"]
        [::core::mem::offset_of!(T3DSkeleton, skeletonRef) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPXInitParams {
    pub matrixStackSize: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TPXInitParams"][::core::mem::size_of::<TPXInitParams>() - 4usize];
    ["Alignment of TPXInitParams"][::core::mem::align_of::<TPXInitParams>() - 4usize];
    ["Offset of field: TPXInitParams::matrixStackSize"]
        [::core::mem::offset_of!(TPXInitParams, matrixStackSize) - 0usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct TPXParticle {
    pub posA: [i8; 3usize],
    pub sizeA: i8,
    pub posB: [i8; 3usize],
    pub sizeB: i8,
    pub colorA: [u8; 4usize],
    pub colorB: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TPXParticle"][::core::mem::size_of::<TPXParticle>() - 16usize];
    ["Alignment of TPXParticle"][::core::mem::align_of::<TPXParticle>() - 16usize];
    ["Offset of field: TPXParticle::posA"][::core::mem::offset_of!(TPXParticle, posA) - 0usize];
    ["Offset of field: TPXParticle::sizeA"][::core::mem::offset_of!(TPXParticle, sizeA) - 3usize];
    ["Offset of field: TPXParticle::posB"][::core::mem::offset_of!(TPXParticle, posB) - 4usize];
    ["Offset of field: TPXParticle::sizeB"][::core::mem::offset_of!(TPXParticle, sizeB) - 7usize];
    ["Offset of field: TPXParticle::colorA"][::core::mem::offset_of!(TPXParticle, colorA) - 8usize];
    ["Offset of field: TPXParticle::colorB"]
        [::core::mem::offset_of!(TPXParticle, colorB) - 12usize];
};

unsafe extern "C" {
    pub static mut T3D_RSP_ID: u32;
    pub fn t3d_init(params: T3DInitParams);
    pub fn t3d_destroy();
    pub fn t3d_frame_start();
    pub fn t3d_screen_clear_color(color: dragon::graphics::color_t);
    pub fn t3d_screen_clear_depth();
    pub fn t3d_viewport_attach(viewport: *mut T3DViewport);
    pub fn t3d_viewport_get() -> *mut T3DViewport;
    pub fn t3d_viewport_set_perspective(
        viewport: *mut T3DViewport,
        fov: f32,
        aspectRatio: f32,
        near: f32,
        far: f32,
    );
    pub fn t3d_viewport_set_projection(viewport: *mut T3DViewport, fov: f32, near: f32, far: f32);
    pub fn t3d_viewport_set_ortho(
        viewport: *mut T3DViewport,
        left: f32,
        right: f32,
        bottom: f32,
        top: f32,
        near: f32,
        far: f32,
    );
    pub fn t3d_viewport_look_at(
        viewport: *mut T3DViewport,
        eye: *const T3DVec3,
        target: *const T3DVec3,
        up: *const T3DVec3,
    );
    pub fn t3d_viewport_set_view_matrix(viewport: *mut T3DViewport, mat: *const T3DMat4);
    pub fn t3d_viewport_calc_viewspace_pos(
        viewport: *mut T3DViewport,
        out: *mut T3DVec3,
        pos: *const T3DVec3,
    );
    pub fn t3d_tri_draw(v0: u32, v1: u32, v2: u32);
    pub fn t3d_tri_draw_unindexed(baseIndex: u32, triCount: u32);
    pub fn t3d_quad_draw_unindexed(baseIndex: u32, quadCount: u32);
    pub fn t3d_tri_draw_strip(indexBuff: *mut i16, count: ::core::ffi::c_int);
    pub fn t3d_tri_draw_strip_and_sync(indexBuff: *mut i16, count: ::core::ffi::c_int);
    pub fn t3d_matrix_set(mat: *const T3DMat4FP, doMultiply: bool);
    pub fn t3d_matrix_push(mat: *const T3DMat4FP);
    pub fn t3d_matrix_pop(count: ::core::ffi::c_int);
    pub fn t3d_matrix_push_pos(count: ::core::ffi::c_int);
    pub fn t3d_matrix_set_proj(mat: *const T3DMat4FP);
    pub fn t3d_vert_load(vertices: *const T3DVertPacked, offset: u32, count: u32);
    pub fn t3d_light_set_ambient(color: *const u8);
    pub fn t3d_light_set_directional(
        index: ::core::ffi::c_int,
        color: *const u8,
        dir: *const T3DVec3,
    );
    pub fn t3d_light_set_point(
        index: ::core::ffi::c_int,
        color: *const u8,
        pos: *const T3DVec3,
        size: f32,
        ignoreNormals: bool,
    );
    pub fn t3d_light_set_count(count: ::core::ffi::c_int);
    pub fn t3d_light_set_exposure(exposure: f32);
    pub fn t3d_fog_set_range(near: f32, far: f32);
    pub fn t3d_vert_pack_normal(normal: *const T3DVec3) -> u16;
    pub fn t3d_state_set_drawflags(drawFlags: T3DDrawFlags);
    pub fn t3d_state_set_depth_offset(offset: i16);
    pub fn t3d_state_set_alpha_to_tile(enable: bool);
    pub fn t3d_state_set_vertex_fx(func: T3DVertexFX, arg0: i16, arg1: i16);
    pub fn t3d_state_set_vertex_fx_scale(scale: u16);
    pub fn t3d_segment_set(segmentId: u8, address: *mut ::core::ffi::c_void);
    pub fn t3d_indexbuffer_convert(indices: *mut i16, count: ::core::ffi::c_int);

    pub fn t3d_model_load(path: *const ::core::ffi::c_char) -> *mut T3DModel;
    pub fn t3d_model_free(model: *mut T3DModel);
    pub fn t3d_model_draw_custom(model: *const T3DModel, conf: T3DModelDrawConf);
    pub fn t3d_model_draw_object(object: *const T3DObject, boneMatrices: *const T3DMat4FP);
    pub fn t3d_model_draw_material(mat: *mut T3DMaterial, state: *mut T3DModelState);
    pub fn t3d_model_get_animations(model: *const T3DModel, anims: *mut *mut T3DChunkAnim);
    pub fn t3d_model_get_animation(
        model: *const T3DModel,
        name: *const ::core::ffi::c_char,
    ) -> *mut T3DChunkAnim;
    pub fn t3d_model_get_object(
        model: *const T3DModel,
        name: *const ::core::ffi::c_char,
    ) -> *mut T3DObject;
    pub fn t3d_model_get_material(
        model: *const T3DModel,
        name: *const ::core::ffi::c_char,
    ) -> *mut T3DMaterial;
    pub fn t3d_model_iter_next(iter: *mut T3DModelIter) -> bool;
    pub fn t3d_model_bvh_query_frustum(bvh: *const T3DBvh, frustum: *const T3DFrustum);

    pub static mut TPX_RSP_ID: u32;
    pub fn tpx_init(params: TPXInitParams);
    pub fn tpx_state_from_t3d();
    pub fn tpx_state_set_scale(scaleX: f32, scaleY: f32);
    pub fn tpx_state_set_base_size(baseSize: u16);
    pub fn tpx_state_set_tex_params(offsetX: i16, mirrorPoint: u16);
    pub fn tpx_particle_draw(particles: *mut TPXParticle, count: u32);
    pub fn tpx_particle_draw_tex(particles: *mut TPXParticle, count: u32);
    pub fn tpx_matrix_set(mat: *const T3DMat4FP, doMultiply: bool);
    pub fn tpx_matrix_push(mat: *const T3DMat4FP);
    pub fn tpx_matrix_pop(count: ::core::ffi::c_int);
    pub fn tpx_matrix_push_pos(count: ::core::ffi::c_int);
    pub fn tpx_buffer_swap(pt: *mut TPXParticle, idxA: u32, idxB: u32);
    pub fn tpx_buffer_copy(pt: *mut TPXParticle, idxDst: u32, idxSrc: u32);
    pub fn tpx_destroy();

    pub fn t3d_skeleton_create_buffered(
        model: *const T3DModel,
        bufferCount: ::core::ffi::c_int,
    ) -> T3DSkeleton;
    pub fn t3d_skeleton_clone(skel: *const T3DSkeleton, useMatrices: bool) -> T3DSkeleton;
    pub fn t3d_skeleton_reset(skeleton: *mut T3DSkeleton);
    pub fn t3d_skeleton_blend(
        skelRes: *const T3DSkeleton,
        skelA: *const T3DSkeleton,
        skelB: *const T3DSkeleton,
        factor: f32,
    );
    pub fn t3d_skeleton_update(skeleton: *mut T3DSkeleton);
    pub fn t3d_skeleton_destroy(skeleton: *mut T3DSkeleton);
    pub fn t3d_skeleton_find_bone(
        skeleton: *mut T3DSkeleton,
        name: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;

    pub fn t3d_anim_create(model: *const T3DModel, name: *const ::core::ffi::c_char) -> T3DAnim;
    pub fn t3d_anim_attach(anim: *mut T3DAnim, skeleton: *const T3DSkeleton);
    pub fn t3d_anim_attach_pos(
        anim: *mut T3DAnim,
        targetIdx: u32,
        target: *mut T3DVec3,
        updateFlag: *mut i32,
    );
    pub fn t3d_anim_attach_rot(
        anim: *mut T3DAnim,
        targetIdx: u32,
        target: *mut T3DQuat,
        updateFlag: *mut i32,
    );
    pub fn t3d_anim_attach_scale(
        anim: *mut T3DAnim,
        targetIdx: u32,
        target: *mut T3DVec3,
        updateFlag: *mut i32,
    );
    pub fn t3d_anim_update(anim: *mut T3DAnim, deltaTime: f32);
    pub fn t3d_anim_set_time(anim: *mut T3DAnim, time: f32);
    pub fn t3d_anim_destroy(anim: *mut T3DAnim);

    pub fn t3d_debug_print_init();
    pub fn t3d_debug_print_start();
    pub fn t3d_debug_print(x: f32, y: f32, str_: *const ::core::ffi::c_char);
    pub fn t3d_debug_printf(x: f32, y: f32, fmt: *const ::core::ffi::c_char, ...);

    pub fn t3d_quat_nlerp(res: *mut T3DQuat, a: *const T3DQuat, b: *const T3DQuat, t: f32);
    pub fn t3d_quat_slerp(res: *mut T3DQuat, a: *const T3DQuat, b: *const T3DQuat, t: f32);
    pub fn t3d_mat4_rotate(mat: *mut T3DMat4, axis: *const T3DVec3, angleRad: f32);
    pub fn t3d_mat4_from_srt(
        mat: *mut T3DMat4,
        scale: *const f32,
        quat: *const f32,
        translate: *const f32,
    );
    pub fn t3d_mat4_from_srt_euler(
        mat: *mut T3DMat4,
        scale: *const f32,
        rot: *const f32,
        translate: *const f32,
    );
    pub fn t3d_mat4_rot_from_dir(mat: *mut T3DMat4, dir: *const T3DVec3, up: *const T3DVec3);
    pub fn t3d_mat4fp_from_srt_euler(
        mat: *mut T3DMat4FP,
        scale: *const f32,
        rot: *const f32,
        translate: *const f32,
    );
    pub fn t3d_mat4fp_from_srt(
        mat: *mut T3DMat4FP,
        scale: *const f32,
        rotQuat: *const f32,
        translate: *const f32,
    );
    pub fn t3d_mat4_to_fixed(matOut: *mut T3DMat4FP, matIn: *const T3DMat4);
    pub fn t3d_mat4_to_fixed_3x4(matOut: *mut T3DMat4FP, matIn: *const T3DMat4);
    pub fn t3d_mat4_perspective(mat: *mut T3DMat4, fov: f32, aspect: f32, near: f32, far: f32);
    pub fn t3d_mat4_ortho(
        mat: *mut T3DMat4,
        left: f32,
        right: f32,
        bottom: f32,
        top: f32,
        near: f32,
        far: f32,
    );
    pub fn t3d_mat4_look_at(
        mat: *mut T3DMat4,
        eye: *const T3DVec3,
        target: *const T3DVec3,
        up: *const T3DVec3,
    );
    pub fn t3d_mat4_to_frustum(frustum: *mut T3DFrustum, mat: *const T3DMat4);
    pub fn t3d_frustum_scale(frustum: *mut T3DFrustum, scale: f32);
    pub fn t3d_frustum_vs_aabb(
        frustum: *const T3DFrustum,
        min: *const T3DVec3,
        max: *const T3DVec3,
    ) -> bool;
    pub fn t3d_frustum_vs_aabb_s16(
        frustum: *const T3DFrustum,
        min: *const i16,
        max: *const i16,
    ) -> bool;
    pub fn t3d_frustum_vs_sphere(
        frustum: *const T3DFrustum,
        center: *const T3DVec3,
        radius: f32,
    ) -> bool;
}
